<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classData" xml:lang="en-US">
<title>Data Class Reference</title>
<indexterm><primary>Data</primary></indexterm>
<para>

<para>A <link linkend="_classData">Data</link> class that provides access to various forms of manipulation and allocation for the processing units. </para>
 
</para>
<para>
<computeroutput>#include &lt;data.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structData_1_1DataKey">DataKey</link></para>

<para>This structure works like a std::pair but its member names are meaningful and are used to store data paired to a particular key. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classData_1a3718d1cee763b61790476340ae048522">Data</link> (void *, bool=false)</para>

<para>Constructor of the <link linkend="_classData">Data</link> class. </para>
</listitem>
            <listitem><para><link linkend="_classData_1aab31956423290f0d62dcca47ab4d16dd">~Data</link> ()</para>

<para>The data destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classData_1a9910d080ca028a52d61408b4dec7b135">PushExtraData</link> (<link linkend="_structData_1_1DataKey">DataKey</link> *)</para>

<para>Pushes data to the extra data vector to be accessed later on if needed. </para>
</listitem>
            <listitem><para>void * <link linkend="_classData_1a97e6952ad6dff622cb9e51d1fcbda74f">GetExtraData</link> (std::string)</para>

<para>Looks for the extra data by the key given. </para>
</listitem>
            <listitem><para>void * <link linkend="_classData_1afe99ebac219f3ea692b9ebd3315b8cdd">data</link> ()</para>

<para>Returns the initial stored data inside the class. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classData_1adacad9b5b70a10592f31f687a5a0b4b9"/>void * <emphasis role="strong">data_</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classData_1a1f5a5d7ef2e41ed76ae6ba16fe512f46"/>unsigned int <emphasis role="strong">index_</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classData_1a2b56c40966f3a00419c2ed189e0b7496"/>std::vector&lt; <link linkend="_structData_1_1DataKey">DataKey</link> * &gt; <emphasis role="strong">extra_data_</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classData_1a4251526e1edf8a38af37cd55e2e03d5e"/>bool <emphasis role="strong">debug_</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A <link linkend="_classData">Data</link> class that provides access to various forms of manipulation and allocation for the processing units. </para>



<para>This class provides functionallity to store multiple data via keys and a pointer to the original data that was stored initially with the creation of the class. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classData_1a3718d1cee763b61790476340ae048522"/><section>
    <title>Data()</title>
<indexterm><primary>Data</primary><secondary>Data</secondary></indexterm>
<indexterm><primary>Data</primary><secondary>Data</secondary></indexterm>
<para><computeroutput>Data::Data (void * data, bool debug = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Constructor of the <link linkend="_classData">Data</link> class. </para>
</para>

<para>Given the initial data allocated it gets it into a wrapper where you can put extra data. This extra-data can be outputed from any of the processing units and given a key to be recognizable for each contiguous processing unit.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>The initial data to assign to the class. It will be used ass the carrier for all the next data in the class. </para>
</entry>
                            </row>
                            <row>
<entry>debug</entry><entry>
<para>The debug flag for showing the information inside the <link linkend="_classData">Data</link> class </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classData_1aab31956423290f0d62dcca47ab4d16dd"/><section>
    <title>~Data()</title>
<indexterm><primary>~Data</primary><secondary>Data</secondary></indexterm>
<indexterm><primary>Data</primary><secondary>~Data</secondary></indexterm>
<para><computeroutput>Data::~Data ( )</computeroutput></para><para>

<para>The data destructor. </para>
</para>

<para>Don&apos;t know what to do with it yet </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classData_1afe99ebac219f3ea692b9ebd3315b8cdd"/><section>
    <title>data()</title>
<indexterm><primary>data</primary><secondary>Data</secondary></indexterm>
<indexterm><primary>Data</primary><secondary>data</secondary></indexterm>
<para><computeroutput>void * Data::data ( )</computeroutput></para><para>

<para>Returns the initial stored data inside the class. </para>
</para>

<para><formalpara><title>Returns</title>

<para>The pointer to the data </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classData_1a97e6952ad6dff622cb9e51d1fcbda74f"/><section>
    <title>GetExtraData()</title>
<indexterm><primary>GetExtraData</primary><secondary>Data</secondary></indexterm>
<indexterm><primary>Data</primary><secondary>GetExtraData</secondary></indexterm>
<para><computeroutput>void * Data::GetExtraData (std::string key)</computeroutput></para><para>

<para>Looks for the extra data by the key given. </para>
</para>

<para>Given a key, it iterates through a vector looking for an specific pair {key, data}. If its found it returns the pointer to the data. Else it returns a nullptr</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key to lookup in the vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classData_1a9910d080ca028a52d61408b4dec7b135"/><section>
    <title>PushExtraData()</title>
<indexterm><primary>PushExtraData</primary><secondary>Data</secondary></indexterm>
<indexterm><primary>Data</primary><secondary>PushExtraData</secondary></indexterm>
<para><computeroutput>void Data::PushExtraData (<link linkend="_structData_1_1DataKey">DataKey</link> * extra_data)</computeroutput></para><para>

<para>Pushes data to the extra data vector to be accessed later on if needed. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>extra_data</entry><entry>
<para>The struct {key, data} to push to the vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/headers/<link linkend="_data_8h">data.h</link>include/definitions/<link linkend="_data_8cc">data.cc</link></section>
</section>
