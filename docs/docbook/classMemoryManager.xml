<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classMemoryManager" xml:lang="en-US">
<title>MemoryManager Class Reference</title>
<indexterm><primary>MemoryManager</primary></indexterm>
<para>

<para>A memory manager that provides an interface for managing a fixed-size queue of pointers to memory buffers. </para>
 
</para>
<para>
<computeroutput>#include &lt;memory_manager.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90f">MemoryManagerError</link> { <link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90faff4878f6fb7b896cbdcdb21555942594">kBadSizing</link>
, <link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90fad9c6e74a42b4478e8bd82cedeaa11a87">kNullPtr</link>
 }</para>

<para>Enumerated type for possible errors in <link linkend="_classMemoryManager">MemoryManager</link> class. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classMemoryManager_1a9a5be3d88f69391224b9b0d885f04b88">MemoryManager</link> (int, bool=false)</para>

<para>Constructor for <link linkend="_classMemoryManager">MemoryManager</link> class. </para>
</listitem>
            <listitem><para><link linkend="_classMemoryManager_1ad4570910ccfc14b2da679bee58ee8f48">~MemoryManager</link> ()</para>

<para>Destructor for <link linkend="_classMemoryManager">MemoryManager</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_classMemoryManager_1af63faf51f2b29c67fea41e0baa32af83">PushIntoIn</link> (void *)</para>

<para>Pushes a memory buffer into the input queue. </para>
</listitem>
            <listitem><para>bool <link linkend="_classMemoryManager_1a8ee578854fc579a88c34c4ff42adbc2b">PushIntoOut</link> (void *)</para>

<para>Pushes a memory buffer into the output queue. </para>
</listitem>
            <listitem><para>void * <link linkend="_classMemoryManager_1a2baf1cd49e91c7618cd6c08151491094">PopFromIn</link> ()</para>

<para>Pops a memory buffer from the input queue. </para>
</listitem>
            <listitem><para>void * <link linkend="_classMemoryManager_1ac9e6791f9bbfafa933686968eb91968a">PopFromOut</link> ()</para>

<para>Pops a memory buffer from the output queue. </para>
</listitem>
            <listitem><para>void <link linkend="_classMemoryManager_1a09b86c875efaba6b2ee477e94a4a1585">LoadMemoryManager</link> (void *)</para>

<para>Loads a memory buffer into the queues. </para>
</listitem>
            <listitem><para>int <link linkend="_classMemoryManager_1ac3861ac0de1853789b87407b38f6d272">in_queue_count</link> () const</para>

<para>Returns the number of memory buffers in the input queue. </para>
</listitem>
            <listitem><para>int <link linkend="_classMemoryManager_1a92e3571872f8bab8ebdaedb53e289d12">out_queue_count</link> () const</para>

<para>Returns the number of memory buffers in the output queue. </para>
</listitem>
            <listitem><para>int <link linkend="_classMemoryManager_1a60faf33dba849e1e33a4bdf9e60bc0da">max_size</link> () const</para>

<para>Returns the maximum size of the memory buffer queues. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1ae12d45dd15b3756a0685c4fc15c24bc1"/>void <emphasis role="strong">wait_finish</emphasis> ()</para>

<para>Tries to get the ownership of the cpu resources to do any action. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classMemoryManager_1a4364b1aa14d01e023a553acc47e00633"/>void ** <emphasis role="strong">in_queue_</emphasis></para>

<para>Pointer to the input queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1ac95efbd85633172f66b14cc8123e2706"/>void ** <emphasis role="strong">out_queue_</emphasis></para>

<para>Pointer to the output queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1afebc7bf6a94c1244df7c87333250f6f8"/>int <emphasis role="strong">max_size_</emphasis></para>

<para>Maximum size of the memory buffer queues. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1a268f83f0a0b3da2ab4ef997649b748c1"/>int <emphasis role="strong">rear_in_iterator_</emphasis></para>

<para>Index of the rear of the input queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1ae647eddfde69a2fa5e980c8f27e3b1ef"/>int <emphasis role="strong">front_in_iterator_</emphasis></para>

<para>Index of the front of the input queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1adfff5c6bb06b0803eb09c7a4a98a950e"/>int <emphasis role="strong">rear_out_iterator_</emphasis></para>

<para>Index of the rear of the output queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1a312808ba0dcf51b9566d1b69a1978f1b"/>int <emphasis role="strong">front_out_iterator_</emphasis></para>

<para>Index of the front of the output queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1ad9a5160b31c1ede53e4fae08b1102bdb"/>std::atomic&lt; int &gt; <emphasis role="strong">in_queue_count_</emphasis></para>

<para>Number of memory buffers in the input queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1a4c13be746d79c150185f2fd614594979"/>std::atomic&lt; int &gt; <emphasis role="strong">out_queue_count_</emphasis></para>

<para>Number of memory buffers in the output queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1aaa9ab06065a933a88a852cbccb9d67b3"/><link linkend="_classSemaphore">Semaphore</link> * <emphasis role="strong">in_semaphore_</emphasis></para>

<para><link linkend="_classSemaphore">Semaphore</link> for the input queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1aac8cadeeaa404c65a3f697d1e20f317f"/><link linkend="_classSemaphore">Semaphore</link> * <emphasis role="strong">out_semaphore_</emphasis></para>

<para><link linkend="_classSemaphore">Semaphore</link> for the output queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1a7274052a7c4a99f2f9745d6cbb7518df"/>std::mutex <emphasis role="strong">push_in_mutex_</emphasis></para>

<para>Mutex for pushing into the input queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1adf399afcaeb90a703d7b62f5d50ed253"/>std::mutex <emphasis role="strong">push_out_mutex_</emphasis></para>

<para>Mutex for pushing into the output queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1aed2c86f1b01143896afacb712684adc8"/>std::mutex <emphasis role="strong">pop_in_mutex_</emphasis></para>

<para>Mutex for popping from the input queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1ac7d1f223e7f5959a4ea7a76b248738e8"/>std::mutex <emphasis role="strong">pop_out_mutex_</emphasis></para>

<para>Mutex for popping from the output queue. </para>
</listitem>
            <listitem><para><anchor xml:id="_classMemoryManager_1a8b10575ae5b6771dbbae038075ff358e"/>bool <emphasis role="strong">debug_</emphasis></para>

<para>Boolean for showing the debug information. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A memory manager that provides an interface for managing a fixed-size queue of pointers to memory buffers. </para>



<para>This class provides functionality to push and pop memory buffers in and out of the queue, as well as a debug flag to print the status of the <link linkend="_classMemoryManager">MemoryManager</link>. It also implements semaphores to ensure synchronization between the producer and consumer threads. </para>
</section>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90f"/><section>
    <title>MemoryManagerError</title>
<indexterm><primary>MemoryManagerError</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>MemoryManagerError</secondary></indexterm>
<para><computeroutput>enum <link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90f">MemoryManager::MemoryManagerError</link></computeroutput></para><para>

<para>Enumerated type for possible errors in <link linkend="_classMemoryManager">MemoryManager</link> class. </para>
</para>

<para>This enumerated type defines the possible errors that can occur in the <link linkend="_classMemoryManager">MemoryManager</link> class. </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>kBadSizing</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>kBadSizing</secondary></indexterm>
<anchor xml:id="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90faff4878f6fb7b896cbdcdb21555942594"/>kBadSizing</entry><entry>
<para>Requested size of the memory manager is less than 1. </para>
</entry></row><row><entry><indexterm><primary>kNullPtr</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>kNullPtr</secondary></indexterm>
<anchor xml:id="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90fad9c6e74a42b4478e8bd82cedeaa11a87"/>kNullPtr</entry><entry>
<para>Requested item in PopFromIn or PopFromOut is null. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classMemoryManager_1a9a5be3d88f69391224b9b0d885f04b88"/><section>
    <title>MemoryManager()</title>
<indexterm><primary>MemoryManager</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>MemoryManager</secondary></indexterm>
<para><computeroutput>MemoryManager::MemoryManager (int mx_size, bool debug = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Constructor for <link linkend="_classMemoryManager">MemoryManager</link> class. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mx_size</entry><entry>
<para>The maximum number of memory buffers the queue can hold </para>
</entry>
                            </row>
                            <row>
<entry>debug</entry><entry>
<para>The flag for the debug information </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry><link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90faff4878f6fb7b896cbdcdb21555942594">MemoryManagerError::kBadSizing</link></entry><entry>
<para>If the maximum size is less than 1 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classMemoryManager_1ad4570910ccfc14b2da679bee58ee8f48"/><section>
    <title>~MemoryManager()</title>
<indexterm><primary>~MemoryManager</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>~MemoryManager</secondary></indexterm>
<para><computeroutput>MemoryManager::~MemoryManager ( )</computeroutput></para><para>

<para>Destructor for <link linkend="_classMemoryManager">MemoryManager</link>. </para>
</para>

<para>Frees the buffers inside both queues and then frees the queues </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classMemoryManager_1ac3861ac0de1853789b87407b38f6d272"/><section>
    <title>in_queue_count()</title>
<indexterm><primary>in_queue_count</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>in_queue_count</secondary></indexterm>
<para><computeroutput>int MemoryManager::in_queue_count ( ) const</computeroutput></para><para>

<para>Returns the number of memory buffers in the input queue. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Number of memory buffers in the input queue. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classMemoryManager_1a09b86c875efaba6b2ee477e94a4a1585"/><section>
    <title>LoadMemoryManager()</title>
<indexterm><primary>LoadMemoryManager</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>LoadMemoryManager</secondary></indexterm>
<para><computeroutput>void MemoryManager::LoadMemoryManager (void * data)</computeroutput></para><para>

<para>Loads a memory buffer into the queues. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>Pointer to the memory buffer. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classMemoryManager_1a60faf33dba849e1e33a4bdf9e60bc0da"/><section>
    <title>max_size()</title>
<indexterm><primary>max_size</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>max_size</secondary></indexterm>
<para><computeroutput>int MemoryManager::max_size ( ) const</computeroutput></para><para>

<para>Returns the maximum size of the memory buffer queues. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Maximum size of the memory buffer queues. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classMemoryManager_1a92e3571872f8bab8ebdaedb53e289d12"/><section>
    <title>out_queue_count()</title>
<indexterm><primary>out_queue_count</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>out_queue_count</secondary></indexterm>
<para><computeroutput>int MemoryManager::out_queue_count ( ) const</computeroutput></para><para>

<para>Returns the number of memory buffers in the output queue. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Number of memory buffers in the output queue. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classMemoryManager_1a2baf1cd49e91c7618cd6c08151491094"/><section>
    <title>PopFromIn()</title>
<indexterm><primary>PopFromIn</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>PopFromIn</secondary></indexterm>
<para><computeroutput>void * MemoryManager::PopFromIn ( )</computeroutput></para><para>

<para>Pops a memory buffer from the input queue. </para>
</para>

<para>
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Throws</entry><entry>
<para><link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90fad9c6e74a42b4478e8bd82cedeaa11a87">MemoryManagerError::kNullPtr</link> If the content to return is null (it can&apos;t be processed)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Pointer to the memory buffer. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classMemoryManager_1ac9e6791f9bbfafa933686968eb91968a"/><section>
    <title>PopFromOut()</title>
<indexterm><primary>PopFromOut</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>PopFromOut</secondary></indexterm>
<para><computeroutput>void * MemoryManager::PopFromOut ( )</computeroutput></para><para>

<para>Pops a memory buffer from the output queue. </para>
</para>

<para>
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry><link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90fad9c6e74a42b4478e8bd82cedeaa11a87">MemoryManagerError::kNullPtr</link></entry><entry>
<para>If the content to return is null (it can&apos;t be processed)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Pointer to the memory buffer. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classMemoryManager_1af63faf51f2b29c67fea41e0baa32af83"/><section>
    <title>PushIntoIn()</title>
<indexterm><primary>PushIntoIn</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>PushIntoIn</secondary></indexterm>
<para><computeroutput>bool MemoryManager::PushIntoIn (void * data)</computeroutput></para><para>

<para>Pushes a memory buffer into the input queue. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>Pointer to the memory buffer.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the input queue is not full, false otherwise. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classMemoryManager_1a8ee578854fc579a88c34c4ff42adbc2b"/><section>
    <title>PushIntoOut()</title>
<indexterm><primary>PushIntoOut</primary><secondary>MemoryManager</secondary></indexterm>
<indexterm><primary>MemoryManager</primary><secondary>PushIntoOut</secondary></indexterm>
<para><computeroutput>bool MemoryManager::PushIntoOut (void * data)</computeroutput></para><para>

<para>Pushes a memory buffer into the output queue. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>data</entry><entry>
<para>Pointer to the memory buffer.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the output queue is not full, false otherwise. </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/headers/<link linkend="_memory__manager_8h">memory_manager.h</link>include/definitions/<link linkend="_memory__manager_8cc">memory_manager.cc</link></section>
</section>
