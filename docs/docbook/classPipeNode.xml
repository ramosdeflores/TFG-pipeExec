<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPipeNode" xml:lang="en-US">
<title>PipeNode Class Reference</title>
<indexterm><primary>PipeNode</primary></indexterm>
<para>

<para>Class representing a single node in a processing pipeline. </para>
 
</para>
<para>
<computeroutput>#include &lt;pipe_node.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classPipeNode_1ad24c37eb9243c1dbb0bca25a4e8cf699"/><emphasis role="strong">PipeNode</emphasis> ()</para>

<para>Default constructor for <link linkend="_classPipeNode">PipeNode</link>. </para>
</listitem>
            <listitem><para><link linkend="_classPipeNode_1aa845c038a5a0cec0d7a76bdbdaae382a">~PipeNode</link> ()</para>

<para>Destructor for <link linkend="_classPipeNode">PipeNode</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1aee893efff96790208b8ca4469e21f26d">EndNodeWork</link> ()</para>

<para>Signals the end of the node&apos;s work. </para>
</listitem>
            <listitem><para><link linkend="_classMemoryManager">MemoryManager</link> * <link linkend="_classPipeNode_1a5d4eee423eaefa255532aac5d68aacbc">in_data_queue</link> ()</para>

<para>Gets the input memory manager of the current node. </para>
</listitem>
            <listitem><para><link linkend="_classMemoryManager">MemoryManager</link> * <link linkend="_classPipeNode_1ad06aef994e3f4a41cde68a29cad0e5c0">out_data_queue</link> ()</para>

<para>Gets the output memory manager of the current node. </para>
</listitem>
            <listitem><para>bool <link linkend="_classPipeNode_1a703936474508a2dcc03643b8cbb9e35d">last_node</link> ()</para>

<para>Gets whether the current node is the last node in the pipeline. </para>
</listitem>
            <listitem><para><link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> * <link linkend="_classPipeNode_1aae68211b26349c699135f30fb76540ab">processing_unit</link> ()</para>

<para>Gets the processing unit of the current node. </para>
</listitem>
            <listitem><para>int <link linkend="_classPipeNode_1aa99e2f1c40b8ed2f01da35044b5779c7">number_of_instances</link> ()</para>

<para>Gets the number of instances of the current node. </para>
</listitem>
            <listitem><para>int <link linkend="_classPipeNode_1a3a2f162f338c771444e6f0de92ab057f">node_id</link> ()</para>

<para>Gets the ID of the current node. </para>
</listitem>
            <listitem><para>std::vector&lt; std::thread * &gt; &amp; <link linkend="_classPipeNode_1a37b0c6cca6f94cf29ba03b136a308f46">running_threads</link> ()</para>

<para>Gets a vector of running threads for the current node. </para>
</listitem>
            <listitem><para>void ** <link linkend="_classPipeNode_1a853680b56049dc32cba7abb4fba4602a">extra_args</link> ()</para>

<para>Get the array of extra args. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1af3487d5c30cd581c228e48f9276b753e">in_data_queue</link> (<link linkend="_classMemoryManager">MemoryManager</link> *)</para>

<para>Sets the input memory manager of the current node. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1a6d07beb25f5a142d05f2acae5fa7bd68">out_data_queue</link> (<link linkend="_classMemoryManager">MemoryManager</link> *)</para>

<para>Sets the output memory manager of the current node. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1aff700133104811d213cd5cf430affaf0">last_node</link> (bool)</para>

<para>Sets the boolean indicating if the node is the last in the pipeline. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1a4d2279b7c5d6874eaec3aa33253a2d76">processing_unit</link> (<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> *)</para>

<para>Sets the processing unit of the node. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1ae5193f9b6ce4678cd4120ef2cb286dae">number_of_instances</link> (int)</para>

<para>Sets the number of instances of the current node. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1a4626a9620b07a42b627fdb2dbe0c478a">node_id</link> (int)</para>

<para>Sets the ID of the current node. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1a82034beec3b84609dee6c4b2c37fdd53">PushThread</link> (std::thread *)</para>

<para>Pushes the thread to the list of running threads. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeNode_1a4bf821b2dcad4b84f70c6c5d3e0efd1b">extra_args</link> (void **)</para>

<para>Sets the extra args for the current node. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Class representing a single node in a processing pipeline. </para>



<para>This class represents a single node in a processing pipeline. It contains a processing unit interface which is used to process the input data from the previous node, and produce output data for the next node. It also contains input and output memory managers for communication with the previous and next nodes. Each node is executed in its own thread. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPipeNode_1aa845c038a5a0cec0d7a76bdbdaae382a"/><section>
    <title>~PipeNode()</title>
<indexterm><primary>~PipeNode</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>~PipeNode</secondary></indexterm>
<para><computeroutput>PipeNode::~PipeNode ( )</computeroutput></para><para>

<para>Destructor for <link linkend="_classPipeNode">PipeNode</link>. </para>
</para>

<para>Joins all the running threads </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPipeNode_1aee893efff96790208b8ca4469e21f26d"/><section>
    <title>EndNodeWork()</title>
<indexterm><primary>EndNodeWork</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>EndNodeWork</secondary></indexterm>
<para><computeroutput>void PipeNode::EndNodeWork ( )</computeroutput></para><para>

<para>Signals the end of the node&apos;s work. </para>
</para>

<para>This method signals the end of the node&apos;s work, and ensures that all threads have finished execution before returning. </para>
</section>
<anchor xml:id="_classPipeNode_1a853680b56049dc32cba7abb4fba4602a"/><section>
    <title>extra_args()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>extra_args</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>extra_args</secondary></indexterm>
<para><computeroutput>void ** PipeNode::extra_args ( )</computeroutput></para><para>

<para>Get the array of extra args. </para>
</para>

<para><formalpara><title>Returns</title>

<para>A pointer to the array of extra args </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classPipeNode_1a4bf821b2dcad4b84f70c6c5d3e0efd1b"/><section>
    <title>extra_args()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>extra_args</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>extra_args</secondary></indexterm>
<para><computeroutput>void PipeNode::extra_args (void ** args)</computeroutput></para><para>

<para>Sets the extra args for the current node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>args</entry><entry>
<para>The pointer to the array of args </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeNode_1a5d4eee423eaefa255532aac5d68aacbc"/><section>
    <title>in_data_queue()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>in_data_queue</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>in_data_queue</secondary></indexterm>
<para><computeroutput><link linkend="_classMemoryManager">MemoryManager</link> * PipeNode::in_data_queue ( )</computeroutput></para><para>

<para>Gets the input memory manager of the current node. </para>
</para>

<para><formalpara><title>Returns</title>

<para>A pointer to the input memory manager of the current node </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classPipeNode_1af3487d5c30cd581c228e48f9276b753e"/><section>
    <title>in_data_queue()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>in_data_queue</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>in_data_queue</secondary></indexterm>
<para><computeroutput>void PipeNode::in_data_queue (<link linkend="_classMemoryManager">MemoryManager</link> * data_in)</computeroutput></para><para>

<para>Sets the input memory manager of the current node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in_data_queue</entry><entry>
<para>A pointer to the input memory manager of the current node </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeNode_1a703936474508a2dcc03643b8cbb9e35d"/><section>
    <title>last_node()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>last_node</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>last_node</secondary></indexterm>
<para><computeroutput>bool PipeNode::last_node ( )</computeroutput></para><para>

<para>Gets whether the current node is the last node in the pipeline. </para>
</para>

<para><formalpara><title>Returns</title>

<para>True if the current node is the last node in the pipeline, false otherwise </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classPipeNode_1aff700133104811d213cd5cf430affaf0"/><section>
    <title>last_node()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>last_node</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>last_node</secondary></indexterm>
<para><computeroutput>void PipeNode::last_node (bool is_last_node)</computeroutput></para><para>

<para>Sets the boolean indicating if the node is the last in the pipeline. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>bool</entry><entry>
<para>- a boolean indicating if the node is the last in the pipeline </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeNode_1a3a2f162f338c771444e6f0de92ab057f"/><section>
    <title>node_id()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>node_id</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>node_id</secondary></indexterm>
<para><computeroutput>int PipeNode::node_id ( )</computeroutput></para><para>

<para>Gets the ID of the current node. </para>
</para>

<para><formalpara><title>Returns</title>

<para>The ID of the current node </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classPipeNode_1a4626a9620b07a42b627fdb2dbe0c478a"/><section>
    <title>node_id()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>node_id</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>node_id</secondary></indexterm>
<para><computeroutput>void PipeNode::node_id (int new_id)</computeroutput></para><para>

<para>Sets the ID of the current node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>node_id</entry><entry>
<para>The ID of the current node </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeNode_1aa99e2f1c40b8ed2f01da35044b5779c7"/><section>
    <title>number_of_instances()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>number_of_instances</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>number_of_instances</secondary></indexterm>
<para><computeroutput>int PipeNode::number_of_instances ( )</computeroutput></para><para>

<para>Gets the number of instances of the current node. </para>
</para>

<para><formalpara><title>Returns</title>

<para>The number of instances of the current node </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classPipeNode_1ae5193f9b6ce4678cd4120ef2cb286dae"/><section>
    <title>number_of_instances()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>number_of_instances</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>number_of_instances</secondary></indexterm>
<para><computeroutput>void PipeNode::number_of_instances (int instances_number)</computeroutput></para><para>

<para>Sets the number of instances of the current node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>number_of_instances</entry><entry>
<para>The number of instances of the current node </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeNode_1ad06aef994e3f4a41cde68a29cad0e5c0"/><section>
    <title>out_data_queue()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>out_data_queue</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>out_data_queue</secondary></indexterm>
<para><computeroutput><link linkend="_classMemoryManager">MemoryManager</link> * PipeNode::out_data_queue ( )</computeroutput></para><para>

<para>Gets the output memory manager of the current node. </para>
</para>

<para><formalpara><title>Returns</title>

<para>A pointer to the output memory manager of the current node </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classPipeNode_1a6d07beb25f5a142d05f2acae5fa7bd68"/><section>
    <title>out_data_queue()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>out_data_queue</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>out_data_queue</secondary></indexterm>
<para><computeroutput>void PipeNode::out_data_queue (<link linkend="_classMemoryManager">MemoryManager</link> * data_out)</computeroutput></para><para>

<para>Sets the output memory manager of the current node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in_data_queue</entry><entry>
<para>A pointer to the output memory manager of the current node </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeNode_1aae68211b26349c699135f30fb76540ab"/><section>
    <title>processing_unit()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>processing_unit</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>processing_unit</secondary></indexterm>
<para><computeroutput><link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> * PipeNode::processing_unit ( )</computeroutput></para><para>

<para>Gets the processing unit of the current node. </para>
</para>

<para><formalpara><title>Returns</title>

<para>A pointer to the processing unit of the current node </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classPipeNode_1a4d2279b7c5d6874eaec3aa33253a2d76"/><section>
    <title>processing_unit()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>processing_unit</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>processing_unit</secondary></indexterm>
<para><computeroutput>void PipeNode::processing_unit (<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> * processing_unit)</computeroutput></para><para>

<para>Sets the processing unit of the node. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry><link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link></entry><entry>
<para>* - a pointer to the processing unit of the node </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeNode_1a82034beec3b84609dee6c4b2c37fdd53"/><section>
    <title>PushThread()</title>
<indexterm><primary>PushThread</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>PushThread</secondary></indexterm>
<para><computeroutput>void PipeNode::PushThread (std::thread * thread)</computeroutput></para><para>

<para>Pushes the thread to the list of running threads. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>thread</entry><entry>
<para>The thread to push to the list of running threads </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeNode_1a37b0c6cca6f94cf29ba03b136a308f46"/><section>
    <title>running_threads()</title>
<indexterm><primary>running_threads</primary><secondary>PipeNode</secondary></indexterm>
<indexterm><primary>PipeNode</primary><secondary>running_threads</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::thread * &gt; &amp; PipeNode::running_threads ( )</computeroutput></para><para>

<para>Gets a vector of running threads for the current node. </para>
</para>

<para><formalpara><title>Returns</title>

<para>A vector of running threads for the current node </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/headers/<link linkend="_pipe__node_8h">pipe_node.h</link>include/definitions/<link linkend="_pipe__node_8cc">pipe_node.cc</link></section>
</section>
