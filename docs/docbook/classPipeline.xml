<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPipeline" xml:lang="en-US">
<title>Pipeline Class Reference</title>
<indexterm><primary>Pipeline</primary></indexterm>
<para>

<para>Class representing the pipeline for the processing of any type of data. </para>
 
</para>
<para>
<computeroutput>#include &lt;pipeline.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structPipeline_1_1Profiling">Profiling</link></para>

<para>This struct holds the information needed for the profiling of the processing unit @desc This struct holds all the information that the pipe will print when the print_profile method function is called. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classPipeline_1a961d2cbad54e692f86bd6a20ba737c14"/>enum <emphasis role="strong">PipelineError</emphasis> { <emphasis role="strong">kBadArgumentFormat</emphasis>
, <emphasis role="strong">kBadArgumentType</emphasis>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPipeline_1a2d08ee8cfebb1f2accaf7676862e198a">Pipeline</link> (<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> *, <link linkend="_classMemoryManager">MemoryManager</link> *, int, bool=false, bool=false)</para>

<para>Constructor for the <link linkend="_classPipeline">Pipeline</link> class. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1a527044d53a20f851d0579fbf313a2dec"/><emphasis role="strong">~Pipeline</emphasis> ()</para>

<para>Default destructor for the pipeline. </para>
</listitem>
            <listitem><para>void <link linkend="_classPipeline_1ac2009692085e84e4bb3470e5639d1ce7">AddProcessingUnit</link> (<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> *, int, const char *=nullptr,...)</para>

<para>Adds a processing unit to the execution list. </para>
</listitem>
            <listitem><para>int <link linkend="_classPipeline_1aaa720ffefb8eb2bc61bd8336a7fee8ce">RunPipe</link> ()</para>

<para>Sets the pipeline to run. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1a134c0e23c0260a6dc74bb936f39ecda9"/>void <emphasis role="strong">WaitFinish</emphasis> ()</para>

<para>Waits until all the threads have finished putting its data inside the (main)&apos;s in_queue <link linkend="_classMemoryManager">MemoryManager</link>. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1ad35850e882d5f54b79344a77830671e5"/>void <emphasis role="strong">Profile</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770">ArgumentType</link> { <?linebreak?><link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770af87e907601aec2c8267f6ef1e2c21a7b">kInt</link>
, <link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770ae7955d2da66d50f3b2c47f12a0e7f3b5">kUnsigned</link>
, <link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770a3649dddbd2e8875a720cf7947664ad16">kFloat</link>
, <link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770a802ae2ff78a3fed5ce4b7354dc0068ba">kExponential</link>
, <?linebreak?><link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770abded5bf0e620d179626b29ae6c45f310">kString</link>
, <link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770a2841ae7f80c9cdd4faff03720d27be4d">kChar</link>
 }</para>

<para>The types of the internal arguments @desc The types of the internal arguments in the variadic function. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_classPipeline_1a54a5cef190dd8f1fe6ad4d802d1c5e6b">count_arguments</link> (const char *)</para>

<para>Returns the number of arguments. </para>
</listitem>
            <listitem><para><link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770">ArgumentType</link> <link linkend="_classPipeline_1a2dd255c899c3a37aed01c8cbcd9984ad">extract_arg</link> (const char *, u64)</para>

<para>Extracts the argument type. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classPipeline_1a0346b45062d43abcadcbf65fad5776b8"/>std::vector&lt; <link linkend="_classPipeNode">PipeNode</link> * &gt; <emphasis role="strong">execution_list_</emphasis></para>

<para>The list of nodes that need to be executed in order. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1a2de5c21427d5c1a905a00009733b358c"/>std::mutex <emphasis role="strong">execution_mutex_</emphasis></para>

<para>The mutex to safely run the nodes. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1ab1debc6f2332ff1cf53bc01cddafa455"/>std::mutex <emphasis role="strong">profiling_mutex_</emphasis></para>

<para>The mutex to safely recollect times. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1a7592dd5d53a61f792d8c504f3b4d3b79"/>int <emphasis role="strong">node_number_</emphasis></para>

<para>The number of nodes that are active. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1af633365e8506bfaacd3dbd7e47dae120"/>bool <emphasis role="strong">debug_</emphasis></para>

<para>The flag to show debug information. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1a16826790f82180f5dc36f7355082b3d3"/>bool <emphasis role="strong">show_profiling_</emphasis></para>

<para>The flag to show profiling information. </para>
</listitem>
            <listitem><para><anchor xml:id="_classPipeline_1a6a08e3c5610844a8050aeda0467365f5"/>std::vector&lt; <link linkend="_structPipeline_1_1Profiling">Profiling</link> &gt; <emphasis role="strong">profiling_list_</emphasis></para>

<para>The list of profiling information. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Class representing the pipeline for the processing of any type of data. </para>



<para>This class masks the processing of the data allowing the (main) thread to only see one queue of data while inside the <link linkend="_classPipeline">Pipeline</link> there are multiple queues and threads consuming the data and processing it concurrently to speed up the proccess. </para>
</section>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770"/><section>
    <title>ArgumentType</title>
<indexterm><primary>ArgumentType</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>ArgumentType</secondary></indexterm>
<para><computeroutput>enum <link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770">Pipeline::ArgumentType</link><computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>The types of the internal arguments @desc The types of the internal arguments in the variadic function. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>kInt</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>kInt</secondary></indexterm>
<anchor xml:id="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770af87e907601aec2c8267f6ef1e2c21a7b"/>kInt</entry><entry>
<para>Type is int. </para>
</entry></row><row><entry><indexterm><primary>kUnsigned</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>kUnsigned</secondary></indexterm>
<anchor xml:id="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770ae7955d2da66d50f3b2c47f12a0e7f3b5"/>kUnsigned</entry><entry>
<para>Type is unsigned. </para>
</entry></row><row><entry><indexterm><primary>kFloat</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>kFloat</secondary></indexterm>
<anchor xml:id="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770a3649dddbd2e8875a720cf7947664ad16"/>kFloat</entry><entry>
<para>Type is float/double. </para>
</entry></row><row><entry><indexterm><primary>kExponential</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>kExponential</secondary></indexterm>
<anchor xml:id="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770a802ae2ff78a3fed5ce4b7354dc0068ba"/>kExponential</entry><entry>
<para>Type is exponential (1eX) </para>
</entry></row><row><entry><indexterm><primary>kString</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>kString</secondary></indexterm>
<anchor xml:id="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770abded5bf0e620d179626b29ae6c45f310"/>kString</entry><entry>
<para>Type is string. </para>
</entry></row><row><entry><indexterm><primary>kChar</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>kChar</secondary></indexterm>
<anchor xml:id="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770a2841ae7f80c9cdd4faff03720d27be4d"/>kChar</entry><entry>
<para>Type is char. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPipeline_1a2d08ee8cfebb1f2accaf7676862e198a"/><section>
    <title>Pipeline()</title>
<indexterm><primary>Pipeline</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>Pipeline</secondary></indexterm>
<para><computeroutput>Pipeline::Pipeline (<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> * first_function, <link linkend="_classMemoryManager">MemoryManager</link> * data_in, int threads_per_node_, bool debug = <computeroutput>false</computeroutput>
, bool profiling = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Constructor for the <link linkend="_classPipeline">Pipeline</link> class. </para>
</para>

<para>Sets the first Node: assigns the processing unit to the one specified as &quot;first_function&quot; then gets the <link linkend="_classMemoryManager">MemoryManager</link> from the (main) thread and puts it as input and output of the Node. Sets the Node as the last node to know that the data has to be pushed into the IN queue for the circular processing to be working. </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPipeline_1ac2009692085e84e4bb3470e5639d1ce7"/><section>
    <title>AddProcessingUnit()</title>
<indexterm><primary>AddProcessingUnit</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>AddProcessingUnit</secondary></indexterm>
<para><computeroutput>void Pipeline::AddProcessingUnit (<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> * processing_unit, int instances, const char * fmt = <computeroutput>nullptr</computeroutput>
,  ...)</computeroutput></para><para>

<para>Adds a processing unit to the execution list. </para>
</para>

<para>Adds a processing unit to the execution list. Creates a new Memory Manager in the previous node for it to function as an output of the previous and an input for the new one. Sets the previous node flag of last_node to false and gets the new node to be the tail. Then connects the output of the last node to the input of the first node to complete the circular processing queue.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>processing_unit</entry><entry>
<para>A pointer to an object of <link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link> </para>
</entry>
                            </row>
                            <row>
<entry>instances</entry><entry>
<para>The number of threads that have to be instanced to run this node. </para>
</entry>
                            </row>
                            <row>
<entry>fmg</entry><entry>
<para>A pointer to the format string of the next arguments </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeline_1a54a5cef190dd8f1fe6ad4d802d1c5e6b"/><section>
    <title>count_arguments()</title>
<indexterm><primary>count_arguments</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>count_arguments</secondary></indexterm>
<para><computeroutput>int Pipeline::count_arguments (const char * str)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Returns the number of arguments. </para>
</para>

<para>A private function that couns the chars into const char*. </para>
</section>
<anchor xml:id="_classPipeline_1a2dd255c899c3a37aed01c8cbcd9984ad"/><section>
    <title>extract_arg()</title>
<indexterm><primary>extract_arg</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>extract_arg</secondary></indexterm>
<para><computeroutput><link linkend="_classPipeline_1ab4e67647e87ca2bd15ad54f4e73eb770">Pipeline::ArgumentType</link> Pipeline::extract_arg (const char * fmt, u64 arg_pos)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Extracts the argument type. </para>
</para>

<para>This method extracts each argument for it to be compared to a series of specified formats to allow the extraction of the arguments of the AddProcessingUnit variadic function.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>fmt</entry><entry>
<para>The C string containing the format </para>
</entry>
                            </row>
                            <row>
<entry>arg_pos</entry><entry>
<para>The position of the argument in the C string: (0,1,2...); </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classPipeline_1aaa720ffefb8eb2bc61bd8336a7fee8ce"/><section>
    <title>RunPipe()</title>
<indexterm><primary>RunPipe</primary><secondary>Pipeline</secondary></indexterm>
<indexterm><primary>Pipeline</primary><secondary>RunPipe</secondary></indexterm>
<para><computeroutput>int Pipeline::RunPipe ( )</computeroutput></para><para>

<para>Sets the pipeline to run. </para>
</para>

<para>For each node inside the execution list it creates &quot;n&quot; instances of threads per node and executes all of them.</para>

<para><formalpara><title>Returns</title>

<para>The number of nodes executed </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
include/headers/<link linkend="_pipeline_8h">pipeline.h</link>include/definitions/pipeline.cc</section>
</section>
