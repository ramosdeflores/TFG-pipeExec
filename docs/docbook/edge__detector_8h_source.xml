<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_edge__detector_8h_source" xml:lang="en-US">
<title>edge_detector.h</title>
<indexterm><primary>include/headers/pu/edge_detector.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;*&#32;LUCID&#32;(Unified&#32;Computing&#32;Image&#32;and&#32;Data-Processing)&#32;is&#32;a&#32;program&#32;to&#32;process</emphasis>
3 <emphasis role="comment">&#32;*&#32;any&#32;type&#32;of&#32;data&#32;concurrently.</emphasis>
4 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;2023&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
5 <emphasis role="comment">&#32;*</emphasis>
6 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;free&#32;software:&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
7 <emphasis role="comment">&#32;*&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
8 <emphasis role="comment">&#32;*&#32;the&#32;Free&#32;Software&#32;Foundation,&#32;either&#32;version&#32;3&#32;of&#32;the&#32;License,&#32;or</emphasis>
9 <emphasis role="comment">&#32;*&#32;(at&#32;your&#32;option)&#32;any&#32;later&#32;version.</emphasis>
10 <emphasis role="comment">&#32;*</emphasis>
11 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">&#32;*&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">&#32;*&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">&#32;*&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 <emphasis role="comment">&#32;*</emphasis>
16 <emphasis role="comment">&#32;*&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License</emphasis>
17 <emphasis role="comment">&#32;*&#32;along&#32;with&#32;this&#32;program.&#32;&#32;If&#32;not,&#32;see&#32;&lt;https://www.gnu.org/licenses/&gt;.</emphasis>
18 <emphasis role="comment">&#32;*</emphasis>
19 <emphasis role="comment">&#32;*&#32;Author:&#32;&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
20 <emphasis role="comment">&#32;*&#32;Contact:&#32;lucas.hernandez.09@ull.edu.es</emphasis>
21 <emphasis role="comment">&#32;*/</emphasis>
22 
32 <emphasis role="preprocessor">#ifndef&#32;EDGE_DETECTOR_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;EDGE_DETECTOR_H</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&quot;../processing_unit_interface.h&quot;</emphasis>
36 
43 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classEdgeDetector">EdgeDetector</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link>&#32;{
44 &#32;<emphasis role="keyword">public</emphasis>:
45 &#32;&#32;<emphasis role="comment">//&#32;Default&#32;constructor&#32;of&#32;the&#32;class</emphasis>
46 &#32;&#32;<link linkend="_classEdgeDetector_1a648088ce3e3f307c1fdbe9b917fe3ee6">EdgeDetector</link>();
47 
48 &#32;&#32;<emphasis role="comment">//&#32;Destructor&#32;of&#32;the&#32;class</emphasis>
49 &#32;&#32;<link linkend="_classEdgeDetector_1a84d1668be5dd4052278a2cf86802746e">~EdgeDetector</link>();
50 
51 &#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;allocate&#32;the&#32;sobel&#32;filter</emphasis>
52 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classEdgeDetector_1ac9d261edf85853da5786247ff730bf16">Start</link>(<emphasis role="keywordtype">void</emphasis>&#32;**&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;<emphasis role="keyword">override</emphasis>;
53 
54 &#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;pass&#32;the&#32;filters&#32;and&#32;process&#32;the&#32;img</emphasis>
55 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classEdgeDetector_1a4b4cdcb26d58152eff812ea837fedb2b">Run</link>(<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;<emphasis role="keyword">override</emphasis>;
56 
57 &#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;liberate&#32;the&#32;memory&#32;allocated</emphasis>
58 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classEdgeDetector_1a2ef8d6908a6930e1e26a1554a258b105">Delete</link>()&#32;<emphasis role="keyword">override</emphasis>;
59 
60 &#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;clone&#32;the&#32;class</emphasis>
61 &#32;&#32;<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link>&#32;*<link linkend="_classEdgeDetector_1a7d60da211152e60b001f96ef1d753bdd">Clone</link>()&#32;<emphasis role="keyword">override</emphasis>;
62 
63 &#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;convolute&#32;via&#32;a&#32;kernel&#32;and&#32;an&#32;img</emphasis>
64 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;**<link linkend="_classEdgeDetector_1a7837d8669034b8bf5b575a6d8b68a779">Convolution</link>(<emphasis role="keywordtype">int</emphasis>&#32;**,&#32;<emphasis role="keywordtype">int</emphasis>&#32;**,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>);
65 
66 &#32;&#32;<emphasis role="comment">//&#32;Method&#32;to&#32;calculate&#32;the&#32;magnitude&#32;of&#32;the&#32;processed&#32;img</emphasis>
67 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classEdgeDetector_1a9be148339689de7543a5e873a0bd4440">Magnitude</link>(pixel_value&#32;**,&#32;<emphasis role="keywordtype">int</emphasis>&#32;**,&#32;<emphasis role="keywordtype">int</emphasis>&#32;**,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>);
68 
69 &#32;<emphasis role="keyword">private</emphasis>:
70 &#32;&#32;pixel_value&#32;IntToPixel(<emphasis role="keywordtype">int</emphasis>);
71 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Bound(<emphasis role="keywordtype">int</emphasis>);
72 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;Hypotenuse(<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>);
73 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;**sobelx_;
74 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;**sobely_;
75 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;debug_;
76 };
77 
78 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
