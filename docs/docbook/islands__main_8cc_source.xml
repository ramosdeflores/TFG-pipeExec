<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_islands__main_8cc_source" xml:lang="en-US">
<title>islands_main.cc</title>
<indexterm><primary>src/islands_main.cc</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;*&#32;LUCID&#32;(Unified&#32;Computing&#32;Image&#32;and&#32;Data-Processing)&#32;is&#32;a&#32;program&#32;to&#32;process</emphasis>
3 <emphasis role="comment">&#32;*&#32;any&#32;type&#32;of&#32;data&#32;concurrently.&#32;Copyright&#32;(C)&#32;2023&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
4 <emphasis role="comment">&#32;*</emphasis>
5 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;free&#32;software:&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
6 <emphasis role="comment">&#32;*&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free</emphasis>
7 <emphasis role="comment">&#32;*&#32;Software&#32;Foundation,&#32;either&#32;version&#32;3&#32;of&#32;the&#32;License,&#32;or&#32;(at&#32;your&#32;option)&#32;any</emphasis>
8 <emphasis role="comment">&#32;*&#32;later&#32;version.</emphasis>
9 <emphasis role="comment">&#32;*</emphasis>
10 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but&#32;WITHOUT</emphasis>
11 <emphasis role="comment">&#32;*&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of&#32;MERCHANTABILITY&#32;or&#32;FITNESS</emphasis>
12 <emphasis role="comment">&#32;*&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more</emphasis>
13 <emphasis role="comment">&#32;*&#32;details.</emphasis>
14 <emphasis role="comment">&#32;*</emphasis>
15 <emphasis role="comment">&#32;*&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License</emphasis>
16 <emphasis role="comment">&#32;*&#32;along&#32;with&#32;this&#32;program.&#32;&#32;If&#32;not,&#32;see&#32;&lt;https://www.gnu.org/licenses/&gt;.</emphasis>
17 <emphasis role="comment">&#32;*</emphasis>
18 <emphasis role="comment">&#32;*&#32;Author:&#32;&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
19 <emphasis role="comment">&#32;*&#32;Contact:&#32;lucas.hernandez.09@ull.edu.es</emphasis>
20 <emphasis role="comment">&#32;*/</emphasis>
21 <emphasis role="preprocessor">#define&#32;PRINT(format,&#32;...)&#32;printf(format)</emphasis>
22 <emphasis role="preprocessor">#define&#32;MAT_AT(mat,&#32;row,&#32;col)&#32;mat[i][j]</emphasis>
23 <emphasis role="preprocessor">#define&#32;NEWLINE&#32;printf(&apos;\n&apos;);</emphasis>
24 <emphasis role="preprocessor">#include&#32;&quot;processing_units.h&quot;</emphasis>
25 
26 <emphasis role="keywordtype">void</emphasis>&#32;extraerAlturasDesdeTIFF(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*archivoTIFF)&#32;{
27 &#32;&#32;TIFF&#32;*tif&#32;=&#32;TIFFOpen(archivoTIFF,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>);
28 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tif)&#32;{
29 &#32;&#32;&#32;&#32;uint32_t&#32;ancho,&#32;alto;
30 &#32;&#32;&#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_IMAGEWIDTH,&#32;&amp;ancho);
31 &#32;&#32;&#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_IMAGELENGTH,&#32;&amp;alto);
32 
33 &#32;&#32;&#32;&#32;uint32_t&#32;tileWidth,&#32;tileHeight;
34 &#32;&#32;&#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_TILEWIDTH,&#32;&amp;tileWidth);
35 &#32;&#32;&#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_TILELENGTH,&#32;&amp;tileHeight);
36 
37 &#32;&#32;&#32;&#32;uint32_t&#32;*buffer&#32;=
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(uint32_t&#32;*)_TIFFmalloc(tileWidth&#32;*&#32;tileHeight&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(uint32_t));
39 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;**matrizAlturas&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;*[alto];
40 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint32_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;alto;&#32;++i)&#32;{
41 &#32;&#32;&#32;&#32;&#32;&#32;matrizAlturas[i]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>[ancho];
42 &#32;&#32;&#32;&#32;}
43 
44 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint32_t&#32;y&#32;=&#32;0;&#32;y&#32;&lt;&#32;alto;&#32;y&#32;+=&#32;tileHeight)&#32;{
45 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint32_t&#32;x&#32;=&#32;0;&#32;x&#32;&lt;&#32;ancho;&#32;x&#32;+=&#32;tileWidth)&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TIFFReadTile(tif,&#32;buffer,&#32;x,&#32;y,&#32;0,&#32;0);
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint32_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;tileHeight;&#32;++i)&#32;{
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;fila&#32;=&#32;y&#32;+&#32;i;
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fila&#32;&gt;=&#32;alto)&#32;{
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint32_t&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;tileWidth;&#32;++j)&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;col&#32;=&#32;x&#32;+&#32;j;
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(col&#32;&gt;=&#32;ancho)&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matrizAlturas[fila][col]&#32;=&#32;(float)buffer[i&#32;*&#32;tileWidth&#32;+&#32;j];
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
60 &#32;&#32;&#32;&#32;&#32;&#32;}
61 &#32;&#32;&#32;&#32;}
62 
63 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Hacer&#32;algo&#32;con&#32;la&#32;matriz&#32;de&#32;alturas&#32;aquí</emphasis>
64 
65 &#32;&#32;&#32;&#32;_TIFFfree(buffer);
66 &#32;&#32;&#32;&#32;TIFFClose(tif);
67 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
68 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;al&#32;abrir&#32;el&#32;archivo&#32;TIFF.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
69 &#32;&#32;}
70 }
71 
72 <emphasis role="keywordtype">int</emphasis>&#32;IslandsMain(<emphasis role="keywordtype">bool</emphasis>&#32;debug_flag,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;pu_debug_flag,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;profiling)&#32;{
73 &#32;&#32;TIFF&#32;*tif&#32;=&#32;TIFFOpen(<emphasis role="stringliteral">&quot;../input_images/ElHierro.tiff&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;r&quot;</emphasis>);
74 &#32;&#32;u64&#32;width;
75 &#32;&#32;u64&#32;height;
76 &#32;&#32;u64&#32;tile_width;
77 &#32;&#32;u64&#32;tile_height;
78 &#32;&#32;u64&#32;unit;
79 &#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_IMAGEWIDTH,&#32;&amp;width);
80 &#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_IMAGELENGTH,&#32;&amp;height);
81 &#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_TILEWIDTH,&#32;&amp;tile_width);
82 &#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_TILELENGTH,&#32;&amp;tile_height);
83 &#32;&#32;TIFFGetField(tif,&#32;TIFFTAG_RESOLUTIONUNIT,&#32;&amp;unit);
84 &#32;&#32;printf(<emphasis role="stringliteral">&quot;%lu&quot;</emphasis>,&#32;unit);
85 
86 &#32;&#32;u64&#32;*buffer&#32;=&#32;(u64&#32;*)_TIFFmalloc(tile_width&#32;*&#32;tile_height&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(u64));
87 &#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;**matrix&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;*[height];
88 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(u64&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;height;&#32;++i)&#32;{
89 &#32;&#32;&#32;&#32;matrix[i]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>[width];
90 &#32;&#32;}
91 
92 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(u64&#32;y&#32;=&#32;0;&#32;y&#32;&lt;&#32;height;&#32;y&#32;+=&#32;tile_height)&#32;{
93 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(u64&#32;x&#32;=&#32;0;&#32;x&#32;&lt;&#32;width;&#32;x&#32;+=&#32;tile_width)&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;TIFFReadTile(tif,&#32;buffer,&#32;x,&#32;y,&#32;0,&#32;0);
95 
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(u64&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;tile_height;&#32;++i)&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u64&#32;row&#32;=&#32;y&#32;+&#32;i;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(row&#32;&gt;=&#32;height)&#32;<emphasis role="keywordflow">break</emphasis>;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(u64&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;tile_width;&#32;++j)&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u64&#32;col&#32;=&#32;x&#32;+&#32;j;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(col&#32;&gt;&#32;width)&#32;<emphasis role="keywordflow">break</emphasis>;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;matrix[row][col]&#32;=&#32;(double)buffer[i&#32;*&#32;tile_width&#32;+&#32;j];
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%f&#32;&quot;</emphasis>,&#32;MAT_AT(matrix,&#32;row,&#32;col));
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
106 &#32;&#32;&#32;&#32;&#32;&#32;}
107 &#32;&#32;&#32;&#32;}
108 &#32;&#32;}
109 
110 &#32;&#32;std::string&#32;unidadMedida&#32;=&#32;<emphasis role="stringliteral">&quot;AAAA&quot;</emphasis>;
111 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(unit)&#32;{
112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;RESUNIT_NONE:
113 &#32;&#32;&#32;&#32;&#32;&#32;unidadMedida&#32;=&#32;<emphasis role="stringliteral">&quot;Sin&#32;unidad&quot;</emphasis>;
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;RESUNIT_INCH:
116 &#32;&#32;&#32;&#32;&#32;&#32;unidadMedida&#32;=&#32;<emphasis role="stringliteral">&quot;Pulgadas&quot;</emphasis>;
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;RESUNIT_CENTIMETER:
119 &#32;&#32;&#32;&#32;&#32;&#32;unidadMedida&#32;=&#32;<emphasis role="stringliteral">&quot;Centímetros&quot;</emphasis>;
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
121 &#32;&#32;}
122 
123 &#32;&#32;_TIFFfree(buffer);
124 &#32;&#32;TIFFClose(tif);
125 &#32;&#32;printf(<emphasis role="stringliteral">&quot;\n%s\n&quot;</emphasis>,&#32;unidadMedida.c_str());
126 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
127 }
128 
129 <emphasis role="comment">/*&#32;vim:set&#32;softtabstop=2&#32;shiftwidth=2&#32;tabstop=2&#32;expandtab:&#32;*/</emphasis>
</programlisting></section>
