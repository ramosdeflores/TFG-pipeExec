<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_memory__manager_8h_source" xml:lang="en-US">
<title>memory_manager.h</title>
<indexterm><primary>include/headers/memory_manager.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;*&#32;LUCID&#32;(Unified&#32;Computing&#32;Image&#32;and&#32;Data-Processing)&#32;is&#32;a&#32;program&#32;to&#32;process</emphasis>
3 <emphasis role="comment">&#32;*&#32;any&#32;type&#32;of&#32;data&#32;concurrently.</emphasis>
4 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;2023&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
5 <emphasis role="comment">&#32;*</emphasis>
6 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;free&#32;software:&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
7 <emphasis role="comment">&#32;*&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
8 <emphasis role="comment">&#32;*&#32;the&#32;Free&#32;Software&#32;Foundation,&#32;either&#32;version&#32;3&#32;of&#32;the&#32;License,&#32;or</emphasis>
9 <emphasis role="comment">&#32;*&#32;(at&#32;your&#32;option)&#32;any&#32;later&#32;version.</emphasis>
10 <emphasis role="comment">&#32;*</emphasis>
11 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">&#32;*&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">&#32;*&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">&#32;*&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 <emphasis role="comment">&#32;*</emphasis>
16 <emphasis role="comment">&#32;*&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License</emphasis>
17 <emphasis role="comment">&#32;*&#32;along&#32;with&#32;this&#32;program.&#32;&#32;If&#32;not,&#32;see&#32;&lt;https://www.gnu.org/licenses/&gt;.</emphasis>
18 <emphasis role="comment">&#32;*</emphasis>
19 <emphasis role="comment">&#32;*&#32;Author:&#32;&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
20 <emphasis role="comment">&#32;*&#32;Contact:&#32;lucas.hernandez.09@ull.edu.es</emphasis>
21 <emphasis role="comment">&#32;*/</emphasis>
22 
32 <emphasis role="preprocessor">#ifndef&#32;MEMORY_MANAGER_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;MEMORY_MANAGER_H</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_semaphore_8h">semaphore.h</link>&quot;</emphasis>
36 
48 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classMemoryManager">MemoryManager</link>&#32;{
49 &#32;<emphasis role="keyword">public</emphasis>:
50 &#32;&#32;<emphasis role="comment">//&#32;Constructor&#32;for&#32;MemoryManager&#32;class</emphasis>
51 &#32;&#32;<emphasis role="comment">//&#32;Throws&#32;MemoryManagerError::kBadSizing&#32;If&#32;the&#32;maximum&#32;size&#32;is&#32;less&#32;than&#32;1</emphasis>
52 &#32;&#32;<link linkend="_classMemoryManager">MemoryManager</link>(<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;<emphasis role="keyword">false</emphasis>);
53 
54 &#32;&#32;<emphasis role="comment">//&#32;Destructor&#32;for&#32;MemoryManager.</emphasis>
55 &#32;&#32;<emphasis role="comment">//&#32;Frees&#32;the&#32;buffers&#32;inside&#32;both&#32;queues&#32;and&#32;then&#32;frees&#32;the&#32;queues</emphasis>
56 &#32;&#32;<link linkend="_classMemoryManager_1ad4570910ccfc14b2da679bee58ee8f48">~MemoryManager</link>();
57 
58 &#32;&#32;<emphasis role="comment">//&#32;Pushes&#32;a&#32;memory&#32;buffer&#32;into&#32;the&#32;input&#32;queue.</emphasis>
59 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMemoryManager_1af63faf51f2b29c67fea41e0baa32af83">PushIntoIn</link>(<emphasis role="keywordtype">void</emphasis>&#32;*);
60 
61 &#32;&#32;<emphasis role="comment">//&#32;Pushes&#32;a&#32;memory&#32;buffer&#32;into&#32;the&#32;output&#32;queue.</emphasis>
62 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMemoryManager_1a8ee578854fc579a88c34c4ff42adbc2b">PushIntoOut</link>(<emphasis role="keywordtype">void</emphasis>&#32;*);
63 
64 &#32;&#32;<emphasis role="comment">//&#32;Pops&#32;a&#32;memory&#32;buffer&#32;from&#32;the&#32;input&#32;queue.</emphasis>
65 &#32;&#32;<emphasis role="comment">//&#32;Throws&#32;MemoryManagerError::kNullPtr&#32;If&#32;the&#32;content&#32;to&#32;return&#32;is</emphasis>
66 &#32;&#32;<emphasis role="comment">//&#32;null&#32;(it&#32;can&apos;t&#32;be&#32;processed)</emphasis>
67 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_classMemoryManager_1a2baf1cd49e91c7618cd6c08151491094">PopFromIn</link>();
68 
69 &#32;&#32;<emphasis role="comment">//&#32;Pops&#32;a&#32;memory&#32;buffer&#32;from&#32;the&#32;output&#32;queue.</emphasis>
70 &#32;&#32;<emphasis role="comment">//&#32;Throws&#32;MemoryManagerError::kNullPtr&#32;If&#32;the&#32;content&#32;to&#32;return&#32;is&#32;null&#32;(it</emphasis>
71 &#32;&#32;<emphasis role="comment">//&#32;can&apos;t&#32;be&#32;processed)</emphasis>
72 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_classMemoryManager_1ac9e6791f9bbfafa933686968eb91968a">PopFromOut</link>();
73 
74 &#32;&#32;<emphasis role="comment">//&#32;Loads&#32;a&#32;memory&#32;buffer&#32;into&#32;the&#32;queues.</emphasis>
75 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMemoryManager_1a09b86c875efaba6b2ee477e94a4a1585">LoadMemoryManager</link>(<emphasis role="keywordtype">void</emphasis>&#32;*);
76 
77 &#32;&#32;<emphasis role="comment">//&#32;Getter.&#32;Returns&#32;the&#32;number&#32;of&#32;memory&#32;buffers&#32;in&#32;the&#32;input&#32;queue.</emphasis>
78 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classMemoryManager_1ac3861ac0de1853789b87407b38f6d272">in_queue_count</link>()&#32;<emphasis role="keyword">const</emphasis>;
79 
80 &#32;&#32;<emphasis role="comment">//&#32;Getter.&#32;Returns&#32;the&#32;number&#32;of&#32;memory&#32;buffers&#32;in&#32;the&#32;output&#32;queue.</emphasis>
81 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classMemoryManager_1a92e3571872f8bab8ebdaedb53e289d12">out_queue_count</link>()&#32;<emphasis role="keyword">const</emphasis>;
82 
83 &#32;&#32;<emphasis role="comment">//&#32;Getter.&#32;Returns&#32;the&#32;maximum&#32;size&#32;of&#32;the&#32;memory&#32;buffer&#32;queues.</emphasis>
84 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classMemoryManager_1a60faf33dba849e1e33a4bdf9e60bc0da">max_size</link>()&#32;<emphasis role="keyword">const</emphasis>;
85 
86 &#32;&#32;<emphasis role="comment">//&#32;Tries&#32;to&#32;get&#32;the&#32;ownership&#32;of&#32;the&#32;cpu&#32;resources&#32;to&#32;do&#32;any&#32;action</emphasis>
87 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMemoryManager_1ae12d45dd15b3756a0685c4fc15c24bc1">wait_finish</link>();
88 
96 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90f">MemoryManagerError</link>&#32;{
97 &#32;&#32;&#32;&#32;<link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90faff4878f6fb7b896cbdcdb21555942594">kBadSizing</link>,&#32;
98 &#32;&#32;&#32;&#32;<link linkend="_classMemoryManager_1a7c1e27d92602c2204aa21dcc2732d90fad9c6e74a42b4478e8bd82cedeaa11a87">kNullPtr</link>,&#32;&#32;&#32;
99 &#32;&#32;};
100 
101 &#32;<emphasis role="keyword">private</emphasis>:
102 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;**<link linkend="_classMemoryManager_1a4364b1aa14d01e023a553acc47e00633">in_queue_</link>;&#32;&#32;
103 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;**<link linkend="_classMemoryManager_1ac95efbd85633172f66b14cc8123e2706">out_queue_</link>;&#32;
104 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classMemoryManager_1afebc7bf6a94c1244df7c87333250f6f8">max_size_</link>;&#32;&#32;&#32;&#32;&#32;
106 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classMemoryManager_1a268f83f0a0b3da2ab4ef997649b748c1">rear_in_iterator_</link>;&#32;&#32;&#32;
107 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classMemoryManager_1ae647eddfde69a2fa5e980c8f27e3b1ef">front_in_iterator_</link>;&#32;&#32;
108 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classMemoryManager_1adfff5c6bb06b0803eb09c7a4a98a950e">rear_out_iterator_</link>;&#32;&#32;
109 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classMemoryManager_1a312808ba0dcf51b9566d1b69a1978f1b">front_out_iterator_</link>;&#32;
111 &#32;&#32;std::atomic&lt;int&gt;
112 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMemoryManager_1ad9a5160b31c1ede53e4fae08b1102bdb">in_queue_count_</link>;&#32;
113 &#32;&#32;std::atomic&lt;int&gt;
114 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMemoryManager_1a4c13be746d79c150185f2fd614594979">out_queue_count_</link>;&#32;
116 &#32;&#32;<link linkend="_classSemaphore">Semaphore</link>&#32;*<link linkend="_classMemoryManager_1aaa9ab06065a933a88a852cbccb9d67b3">in_semaphore_</link>;&#32;&#32;
117 &#32;&#32;<link linkend="_classSemaphore">Semaphore</link>&#32;*<link linkend="_classMemoryManager_1aac8cadeeaa404c65a3f697d1e20f317f">out_semaphore_</link>;&#32;
119 &#32;&#32;std::mutex&#32;<link linkend="_classMemoryManager_1a7274052a7c4a99f2f9745d6cbb7518df">push_in_mutex_</link>;&#32;&#32;
120 &#32;&#32;std::mutex&#32;<link linkend="_classMemoryManager_1adf399afcaeb90a703d7b62f5d50ed253">push_out_mutex_</link>;&#32;
121 &#32;&#32;std::mutex&#32;<link linkend="_classMemoryManager_1aed2c86f1b01143896afacb712684adc8">pop_in_mutex_</link>;&#32;&#32;&#32;
122 &#32;&#32;std::mutex&#32;<link linkend="_classMemoryManager_1ac7d1f223e7f5959a4ea7a76b248738e8">pop_out_mutex_</link>;&#32;&#32;
124 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMemoryManager_1a8b10575ae5b6771dbbae038075ff358e">debug_</link>;&#32;
125 };
126 
127 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
