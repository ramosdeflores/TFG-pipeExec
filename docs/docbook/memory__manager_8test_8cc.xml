<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_memory__manager_8test_8cc" xml:lang="en-US">
<title>tests/memory_manager.test.cc File Reference</title>
<indexterm><primary>tests/memory_manager.test.cc</primary></indexterm>
<para>

<para>This file contains the tests for the memory_manager class pushing its limits. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;../include/headers/memory_manager.h&quot;<?linebreak?>#include &lt;gtest/gtest.h&gt;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_memory__manager_8test_8cc_1a869f8d44bd06d29b1285fbc3611b966f">TEST</link> (MemoryManagerTest, Initial)</para>
</listitem>
            <listitem><para><link linkend="_memory__manager_8test_8cc_1a25d0c0534f912bb6607daf8677285310">TEST</link> (MemoryManagerTest, PushIntoIn)</para>
</listitem>
            <listitem><para><link linkend="_memory__manager_8test_8cc_1aa4d93c94a4ad6503f1eb36bdea15cbd8">TEST</link> (MemoryManagerTest, PushIntoOut)</para>
</listitem>
            <listitem><para><link linkend="_memory__manager_8test_8cc_1a0c4ba9c85a884661b43550d7973bf254">TEST</link> (MemoryManagerTest, PopFromIn)</para>
</listitem>
            <listitem><para><link linkend="_memory__manager_8test_8cc_1a9ef81e729010668e97ba03644b2c2424">TEST</link> (MemoryManagerTest, PopFromOut)</para>
</listitem>
            <listitem><para><link linkend="_memory__manager_8test_8cc_1aecbee3af655cacde7a60394e8f1e88be">TEST</link> (MemoryManagerTest, LoadMemoryManager)</para>
</listitem>
            <listitem><para><link linkend="_memory__manager_8test_8cc_1af5fbaada89aab5d80010625b03297b5b">TEST</link> (MemoryManagerTest, NullPtr)</para>
</listitem>
            <listitem><para><link linkend="_memory__manager_8test_8cc_1a5f84596eef72e6d8af087735d225893c">TEST</link> (MemoryManagerTest, BadSizing)</para>
</listitem>
            <listitem><para><anchor xml:id="_memory__manager_8test_8cc_1a530f0d54e1cd692e87317fca45fc4639"/>void <emphasis role="strong">RunThread</emphasis> (<link linkend="_classMemoryManager">MemoryManager</link> &amp;mm)</para>
</listitem>
            <listitem><para><anchor xml:id="_memory__manager_8test_8cc_1a367ea5db9767cd2455932fc34018d612"/><emphasis role="strong">TEST</emphasis> (MemoryManagerTest, MultithreadingAccess)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This file contains the tests for the memory_manager class pushing its limits. </para>

<para><formalpara><title>Author</title>

<para>Lucas Hern√°ndez Abreu Contact: <link xlink:href="mailto:lucas.hernandez.09@ull.edu.es">lucas.hernandez.09@ull.edu.es</link> </para>
</formalpara>
</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_memory__manager_8test_8cc_1a5f84596eef72e6d8af087735d225893c"/><section>
    <title>TEST()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>memory_manager.test.cc</secondary></indexterm>
<indexterm><primary>memory_manager.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (MemoryManagerTest , BadSizing )</computeroutput></para>
<para><para><link linkend="_test_1_test000008">Test</link> 
<para>Test the behaviour of <link linkend="_classMemoryManager">MemoryManager</link> class with invalid sizing. Assert that creating a <link linkend="_classMemoryManager">MemoryManager</link> object with a negative size throws a MemoryManagerError. </para>
</para></para>
</section>
<anchor xml:id="_memory__manager_8test_8cc_1a869f8d44bd06d29b1285fbc3611b966f"/><section>
    <title>TEST()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>memory_manager.test.cc</secondary></indexterm>
<indexterm><primary>memory_manager.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (MemoryManagerTest , Initial )</computeroutput></para>
<para><para><link linkend="_test_1_test000001">Test</link> 
<para>Test case for initializing the <link linkend="_classMemoryManager">MemoryManager</link>. The <link linkend="_classMemoryManager">MemoryManager</link> is initialized with a given size, and the test checks if the maximum size, input queue count, and output queue count are initialized to their correct values. </para>
</para></para>
</section>
<anchor xml:id="_memory__manager_8test_8cc_1aecbee3af655cacde7a60394e8f1e88be"/><section>
    <title>TEST()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>memory_manager.test.cc</secondary></indexterm>
<indexterm><primary>memory_manager.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (MemoryManagerTest , LoadMemoryManager )</computeroutput></para>
<para><para><link linkend="_test_1_test000006">Test</link> 
<para>Test the LoadMemoryManager method of <link linkend="_classMemoryManager">MemoryManager</link> class. Given a <link linkend="_classMemoryManager">MemoryManager</link> object mm and an int pointer data1, load data1 into mm and test if in_queue_count() is 1 and out_queue_count() is 0. </para>
</para></para>
</section>
<anchor xml:id="_memory__manager_8test_8cc_1af5fbaada89aab5d80010625b03297b5b"/><section>
    <title>TEST()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>memory_manager.test.cc</secondary></indexterm>
<indexterm><primary>memory_manager.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (MemoryManagerTest , NullPtr )</computeroutput></para>
<para><para><link linkend="_test_1_test000007">Test</link> 
<para>Test the behaviour of <link linkend="_classMemoryManager">MemoryManager</link> class with null pointers. Given a <link linkend="_classMemoryManager">MemoryManager</link> object mm and two int pointers, load them into mm and pop them out to mm&apos;s out queue. Assert that mm&apos;s in queue and out queue are both non empty.</para>
</para></para>

<para>If we tried to pop without having nothing, the thread would block </para>
</section>
<anchor xml:id="_memory__manager_8test_8cc_1a0c4ba9c85a884661b43550d7973bf254"/><section>
    <title>TEST()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>memory_manager.test.cc</secondary></indexterm>
<indexterm><primary>memory_manager.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (MemoryManagerTest , PopFromIn )</computeroutput></para>
<para><para><link linkend="_test_1_test000004">Test</link> 
<para>Test case for popping an item from the input queue. The test initializes the <link linkend="_classMemoryManager">MemoryManager</link> with a size of 2 and pushes two items into the input queue. The test verifies that the first item pushed is popped from the queue first, followed by the second item. Finally, the test checks if a nullptr is returned when trying to pop an item from an empty queue. </para>
</para></para>
</section>
<anchor xml:id="_memory__manager_8test_8cc_1a9ef81e729010668e97ba03644b2c2424"/><section>
    <title>TEST()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>memory_manager.test.cc</secondary></indexterm>
<indexterm><primary>memory_manager.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (MemoryManagerTest , PopFromOut )</computeroutput></para>
<para><para><link linkend="_test_1_test000005">Test</link> 
<para>Tests the case of popping from the output queue. It creates a <link linkend="_classMemoryManager">MemoryManager</link> object with a maximum size of 2 and pushes two integers into its out_queue_. Then, it calls PopFromOut() twice and checks if it returns the expected values. </para>
</para></para>
</section>
<anchor xml:id="_memory__manager_8test_8cc_1a25d0c0534f912bb6607daf8677285310"/><section>
    <title>TEST()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>memory_manager.test.cc</secondary></indexterm>
<indexterm><primary>memory_manager.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (MemoryManagerTest , PushIntoIn )</computeroutput></para>
<para><para><link linkend="_test_1_test000002">Test</link> 
<para>Test case for pushing an item into the input queue. The test initializes the <link linkend="_classMemoryManager">MemoryManager</link> with a size of 2 and attempts to push three different items into the input queue. The test verifies that the first two items are successfully pushed into the queue, and the result of the second push is false due to the queue&apos;s full capacity. Finally, the test checks if the input queue count is updated to the correct value. </para>
</para></para>
</section>
<anchor xml:id="_memory__manager_8test_8cc_1aa4d93c94a4ad6503f1eb36bdea15cbd8"/><section>
    <title>TEST()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>memory_manager.test.cc</secondary></indexterm>
<indexterm><primary>memory_manager.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (MemoryManagerTest , PushIntoOut )</computeroutput></para>
<para><para><link linkend="_test_1_test000003">Test</link> 
<para>Test case for pushing an item into the output queue. The test initializes the <link linkend="_classMemoryManager">MemoryManager</link> with a size of 2 and attempts to push two different items into the output queue. The test verifies that the first two items are successfully pushed into the queue, and the result of the second push is false due to the queue&apos;s full capacity. Finally, the test checks if the output queue count is updated to the correct value. </para>
</para></para>
</section>
</section>
</section>
