<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_pipe__node_8h_source" xml:lang="en-US">
<title>pipe_node.h</title>
<indexterm><primary>include/headers/pipe_node.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;*&#32;LUCID&#32;(Unified&#32;Computing&#32;Image&#32;and&#32;Data-Processing)&#32;is&#32;a&#32;program&#32;to&#32;process</emphasis>
3 <emphasis role="comment">&#32;*&#32;any&#32;type&#32;of&#32;data&#32;concurrently.</emphasis>
4 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;2023&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
5 <emphasis role="comment">&#32;*</emphasis>
6 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;free&#32;software:&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
7 <emphasis role="comment">&#32;*&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
8 <emphasis role="comment">&#32;*&#32;the&#32;Free&#32;Software&#32;Foundation,&#32;either&#32;version&#32;3&#32;of&#32;the&#32;License,&#32;or</emphasis>
9 <emphasis role="comment">&#32;*&#32;(at&#32;your&#32;option)&#32;any&#32;later&#32;version.</emphasis>
10 <emphasis role="comment">&#32;*</emphasis>
11 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">&#32;*&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">&#32;*&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">&#32;*&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 <emphasis role="comment">&#32;*</emphasis>
16 <emphasis role="comment">&#32;*&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License</emphasis>
17 <emphasis role="comment">&#32;*&#32;along&#32;with&#32;this&#32;program.&#32;&#32;If&#32;not,&#32;see&#32;&lt;https://www.gnu.org/licenses/&gt;.</emphasis>
18 <emphasis role="comment">&#32;*</emphasis>
19 <emphasis role="comment">&#32;*&#32;Author:&#32;&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
20 <emphasis role="comment">&#32;*&#32;Contact:&#32;lucas.hernandez.09@ull.edu.es</emphasis>
21 <emphasis role="comment">&#32;*/</emphasis>
22 
31 <emphasis role="preprocessor">#ifndef&#32;PIPE_NODE_H</emphasis>
32 <emphasis role="preprocessor">#define&#32;PIPE_NODE_H</emphasis>
33 
34 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_processing__unit__interface_8h">processing_unit_interface.h</link>&quot;</emphasis>
35 
46 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classPipeNode">PipeNode</link>&#32;{
47 &#32;<emphasis role="keyword">public</emphasis>:
48 &#32;&#32;<emphasis role="comment">//&#32;Default&#32;constructor&#32;for&#32;PipeNode</emphasis>
49 &#32;&#32;<link linkend="_classPipeNode_1ad24c37eb9243c1dbb0bca25a4e8cf699">PipeNode</link>();
50 
51 &#32;&#32;<emphasis role="comment">//&#32;Destructor&#32;for&#32;PipeNode</emphasis>
52 &#32;&#32;<link linkend="_classPipeNode_1aa845c038a5a0cec0d7a76bdbdaae382a">~PipeNode</link>();
53 
54 &#32;&#32;<emphasis role="comment">//&#32;This&#32;method&#32;signals&#32;the&#32;end&#32;of&#32;the&#32;node&apos;s&#32;work,&#32;and&#32;ensures&#32;that&#32;all</emphasis>
55 &#32;&#32;<emphasis role="comment">//&#32;threads&#32;have&#32;finished&#32;execution&#32;before&#32;returning.</emphasis>
56 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1aee893efff96790208b8ca4469e21f26d">EndNodeWork</link>();
57 
58 &#32;&#32;<emphasis role="comment">//&#32;Gets&#32;the&#32;input&#32;memory&#32;manager&#32;of&#32;the&#32;current&#32;node</emphasis>
59 &#32;&#32;<link linkend="_classMemoryManager">MemoryManager</link>&#32;*<link linkend="_classPipeNode_1a5d4eee423eaefa255532aac5d68aacbc">in_data_queue</link>();
60 
61 &#32;&#32;<emphasis role="comment">//&#32;Gets&#32;the&#32;output&#32;memory&#32;manager&#32;of&#32;the&#32;current&#32;node</emphasis>
62 &#32;&#32;<link linkend="_classMemoryManager">MemoryManager</link>&#32;*<link linkend="_classPipeNode_1ad06aef994e3f4a41cde68a29cad0e5c0">out_data_queue</link>();
63 
64 &#32;&#32;<emphasis role="comment">//&#32;@brief&#32;Gets&#32;whether&#32;the&#32;current&#32;node&#32;is&#32;the&#32;last&#32;node&#32;in&#32;the&#32;pipeline</emphasis>
65 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classPipeNode_1a703936474508a2dcc03643b8cbb9e35d">last_node</link>();
66 
67 &#32;&#32;<emphasis role="comment">//&#32;Gets&#32;the&#32;processing&#32;unit&#32;of&#32;the&#32;current&#32;node</emphasis>
68 &#32;&#32;<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link>&#32;*<link linkend="_classPipeNode_1aae68211b26349c699135f30fb76540ab">processing_unit</link>();
69 
70 &#32;&#32;<emphasis role="comment">//&#32;Gets&#32;the&#32;number&#32;of&#32;instances&#32;of&#32;the&#32;current&#32;node</emphasis>
71 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classPipeNode_1aa99e2f1c40b8ed2f01da35044b5779c7">number_of_instances</link>();
72 
73 &#32;&#32;<emphasis role="comment">//&#32;Gets&#32;the&#32;ID&#32;of&#32;the&#32;current&#32;node</emphasis>
74 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classPipeNode_1a3a2f162f338c771444e6f0de92ab057f">node_id</link>();
75 
76 &#32;&#32;<emphasis role="comment">//&#32;Gets&#32;a&#32;vector&#32;of&#32;running&#32;threads&#32;for&#32;the&#32;current&#32;node</emphasis>
77 &#32;&#32;std::vector&lt;std::thread&#32;*&gt;&#32;&amp;<link linkend="_classPipeNode_1a37b0c6cca6f94cf29ba03b136a308f46">running_threads</link>();
78 
79 &#32;&#32;<emphasis role="comment">//&#32;Gets&#32;the&#32;pointer&#32;to&#32;the&#32;extra_args</emphasis>
80 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;**<link linkend="_classPipeNode_1a853680b56049dc32cba7abb4fba4602a">extra_args</link>();
81 
82 &#32;&#32;<emphasis role="comment">//&#32;Sets&#32;the&#32;input&#32;memory&#32;manager&#32;of&#32;the&#32;current&#32;node</emphasis>
83 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1a5d4eee423eaefa255532aac5d68aacbc">in_data_queue</link>(<link linkend="_classMemoryManager">MemoryManager</link>&#32;*);
84 
85 &#32;&#32;<emphasis role="comment">//&#32;Sets&#32;the&#32;output&#32;memory&#32;manager&#32;of&#32;the&#32;current&#32;node</emphasis>
86 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1ad06aef994e3f4a41cde68a29cad0e5c0">out_data_queue</link>(<link linkend="_classMemoryManager">MemoryManager</link>&#32;*);
87 
88 &#32;&#32;<emphasis role="comment">//&#32;Sets&#32;the&#32;boolean&#32;indicating&#32;if&#32;the&#32;node&#32;is&#32;the&#32;last&#32;in&#32;the</emphasis>
89 &#32;&#32;<emphasis role="comment">//&#32;pipeline</emphasis>
90 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1a703936474508a2dcc03643b8cbb9e35d">last_node</link>(<emphasis role="keywordtype">bool</emphasis>);
91 
92 &#32;&#32;<emphasis role="comment">//&#32;Sets&#32;the&#32;processing&#32;unit&#32;of&#32;the&#32;node</emphasis>
93 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1aae68211b26349c699135f30fb76540ab">processing_unit</link>(<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link>&#32;*);
94 
95 &#32;&#32;<emphasis role="comment">//&#32;Sets&#32;the&#32;number&#32;of&#32;instances&#32;of&#32;the&#32;current&#32;node</emphasis>
96 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1aa99e2f1c40b8ed2f01da35044b5779c7">number_of_instances</link>(<emphasis role="keywordtype">int</emphasis>);
97 
98 &#32;&#32;<emphasis role="comment">//&#32;Sets&#32;the&#32;ID&#32;of&#32;the&#32;current&#32;node</emphasis>
99 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1a3a2f162f338c771444e6f0de92ab057f">node_id</link>(<emphasis role="keywordtype">int</emphasis>);
100 
101 &#32;&#32;<emphasis role="comment">//&#32;Pushes&#32;the&#32;thread&#32;to&#32;the&#32;list&#32;of&#32;running&#32;threads</emphasis>
102 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1a82034beec3b84609dee6c4b2c37fdd53">PushThread</link>(std::thread&#32;*);
103 
104 &#32;&#32;<emphasis role="comment">//&#32;Sets&#32;the&#32;extra_args</emphasis>
105 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classPipeNode_1a853680b56049dc32cba7abb4fba4602a">extra_args</link>(<emphasis role="keywordtype">void</emphasis>&#32;**);
106 
107 &#32;<emphasis role="keyword">private</emphasis>:
108 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classPipeNode_1a6be5d9ad9f2430bb2d81072810fc4f11">node_id_</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
109 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classPipeNode_1af9c41efacb66b6d094ce8aaea3510ef8">number_of_instances_</link>;&#32;
110 &#32;&#32;<link linkend="_classMemoryManager">MemoryManager</link>&#32;*<link linkend="_classPipeNode_1a928e1ff0d25958be9815ff2790ff67eb">in_data_queue_</link>;&#32;&#32;
111 &#32;&#32;<link linkend="_classMemoryManager">MemoryManager</link>&#32;*<link linkend="_classPipeNode_1a6812a42f8c07c2093b8060e7953e2158">out_data_queue_</link>;&#32;
112 &#32;&#32;<link linkend="_classProcessingUnitInterface">ProcessingUnitInterface</link>
113 &#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_classPipeNode_1a5a2f0fa30d88fec4edd645322a4dfc58">processing_unit_</link>;&#32;
114 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classPipeNode_1a918c14b7dfa050206f4e2b27d09e3cd5">is_last_node_</link>;&#32;&#32;&#32;&#32;
115 &#32;&#32;std::vector&lt;std::thread&#32;*&gt;
116 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classPipeNode_1acc5d119c7b2977ece88182a445928aac">running_threads_</link>;&#32;
117 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;**extra_args_;
118 };
119 
120 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
