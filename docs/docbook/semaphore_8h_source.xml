<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_semaphore_8h_source" xml:lang="en-US">
<title>semaphore.h</title>
<indexterm><primary>include/headers/semaphore.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;*&#32;LUCID&#32;(Unified&#32;Computing&#32;Image&#32;and&#32;Data-Processing)&#32;is&#32;a&#32;program&#32;to&#32;process</emphasis>
3 <emphasis role="comment">&#32;*&#32;any&#32;type&#32;of&#32;data&#32;concurrently.</emphasis>
4 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;2023&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
5 <emphasis role="comment">&#32;*</emphasis>
6 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;free&#32;software:&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
7 <emphasis role="comment">&#32;*&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
8 <emphasis role="comment">&#32;*&#32;the&#32;Free&#32;Software&#32;Foundation,&#32;either&#32;version&#32;3&#32;of&#32;the&#32;License,&#32;or</emphasis>
9 <emphasis role="comment">&#32;*&#32;(at&#32;your&#32;option)&#32;any&#32;later&#32;version.</emphasis>
10 <emphasis role="comment">&#32;*</emphasis>
11 <emphasis role="comment">&#32;*&#32;This&#32;program&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but&#32;WITHOUT</emphasis>
12 <emphasis role="comment">&#32;*&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of&#32;MERCHANTABILITY&#32;or&#32;FITNESS</emphasis>
13 <emphasis role="comment">&#32;*&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more</emphasis>
14 <emphasis role="comment">&#32;*&#32;details.</emphasis>
15 <emphasis role="comment">&#32;*</emphasis>
16 <emphasis role="comment">&#32;*&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License</emphasis>
17 <emphasis role="comment">&#32;*&#32;along&#32;with&#32;this&#32;program.&#32;&#32;If&#32;not,&#32;see&#32;&lt;https://www.gnu.org/licenses/&gt;.</emphasis>
18 <emphasis role="comment">&#32;*</emphasis>
19 <emphasis role="comment">&#32;*&#32;Author:&#32;&#32;Lucas&#32;Hernández&#32;Abreu</emphasis>
20 <emphasis role="comment">&#32;*&#32;Contact:&#32;lucas.hernandez.09@ull.edu.es</emphasis>
21 <emphasis role="comment">&#32;*/</emphasis>
22 
33 <emphasis role="preprocessor">#ifndef&#32;_SEMAPHORE_H</emphasis>
34 <emphasis role="preprocessor">#define&#32;_SEMAPHORE_H</emphasis>
35 
36 <emphasis role="preprocessor">#include&#32;&quot;libraries.h&quot;</emphasis>
37 
46 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classSemaphore">Semaphore</link>&#32;{
47 
48 &#32;&#32;<emphasis role="keyword">public</emphasis>:
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_classSemaphore_1a4cc47e8b75c536da049e926dc582f159">LUCIDSemaphoreType</link>&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSemaphore_1a4cc47e8b75c536da049e926dc582f159ab36fd27cdc8fffb7da3eaa04a353a762">kNone</link>,&#32;
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSemaphore_1a4cc47e8b75c536da049e926dc582f159ae8ba5e3963447989950fc80893396936">kIn</link>,&#32;&#32;&#32;
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSemaphore_1a4cc47e8b75c536da049e926dc582f159a08bbc9b01a0b03bddc8e884c8d2c63df">kOut</link>,&#32;&#32;
62 &#32;&#32;&#32;&#32;};
63 
64 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constructs&#32;a&#32;new&#32;Semaphore&#32;object</emphasis>
65 &#32;&#32;&#32;&#32;<link linkend="_classSemaphore">Semaphore</link>(<emphasis role="keywordtype">int</emphasis>&#32;=&#32;0,&#32;<link linkend="_classSemaphore_1a4cc47e8b75c536da049e926dc582f159">LUCIDSemaphoreType</link>&#32;=&#32;<link linkend="_classSemaphore_1a4cc47e8b75c536da049e926dc582f159ab36fd27cdc8fffb7da3eaa04a353a762">LUCIDSemaphoreType::kNone</link>,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;<emphasis role="keyword">false</emphasis>);
67 
68 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destroys&#32;the&#32;Semaphore&#32;object</emphasis>
69 &#32;&#32;&#32;&#32;<link linkend="_classSemaphore_1a633658a6fde276bffc912028725c6ade">~Semaphore</link>();
70 
71 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;function&#32;blocks&#32;the&#32;calling&#32;thread&#32;until&#32;the&#32;semaphore&#32;count&#32;is</emphasis>
72 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;greater&#32;than&#32;zero.</emphasis>
73 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classSemaphore_1a72aabebf026e3a8b1f3e4d0fa8ee1eda">Wait</link>();
74 
75 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;function&#32;increments&#32;the&#32;semaphore&#32;count&#32;and&#32;wakes&#32;up&#32;one&#32;waiting</emphasis>
76 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;thread,&#32;if&#32;there&#32;is&#32;any.</emphasis>
77 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classSemaphore_1a86f92f738b4486439b296d8e235895f2">Signal</link>();
78 
79 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;current&#32;count&#32;of&#32;the&#32;semaphore</emphasis>
80 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSemaphore_1a3bbd0cd1b7c27fd8fad66ac6108e37fe">count</link>();
81 
82 &#32;&#32;<emphasis role="keyword">private</emphasis>:
83 &#32;&#32;&#32;&#32;std::atomic&lt;int&gt;&#32;count_;&#32;&#32;&#32;&#32;&#32;
84 &#32;&#32;&#32;&#32;std::mutex&#32;mtx_;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
85 &#32;&#32;&#32;&#32;std::condition_variable&#32;cv_;&#32;
86 &#32;&#32;&#32;&#32;std::string&#32;type_;&#32;
88 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;debug_;&#32;
90 };
91 
92 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
