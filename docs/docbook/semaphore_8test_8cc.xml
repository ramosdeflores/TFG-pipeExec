<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_semaphore_8test_8cc" xml:lang="en-US">
<title>tests/semaphore.test.cc File Reference</title>
<indexterm><primary>tests/semaphore.test.cc</primary></indexterm>
<para>

<para>This file contains the tests for the functionalities of the semaphore class. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;../include/headers/semaphore.h&quot;<?linebreak?>#include &lt;gtest/gtest.h&gt;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_semaphore_8test_8cc_1af650c646e82923c918453607b393031e">TEST</link> (SemaphoreTest, InitialCount)</para>
</listitem>
            <listitem><para><link linkend="_semaphore_8test_8cc_1a45174a14d2cdeaa34e401178b0bd7f25">TEST</link> (SemaphoreTest, WaitSignal)</para>
</listitem>
            <listitem><para><link linkend="_semaphore_8test_8cc_1a839989411f5a2147cd64bdba9fa27905">TEST</link> (SemaphoreTest, MultipleWaitSignal)</para>
</listitem>
            <listitem><para><link linkend="_semaphore_8test_8cc_1a649c78316d8d2c3dc73d84ce5d5f712b">TEST</link> (SemaphoreTest, WaitWithoutSignal)</para>
</listitem>
            <listitem><para><link linkend="_semaphore_8test_8cc_1aed489802850a894442116035cc6fd450">TEST</link> (SemaphoreTest, SignalWithoutWait)</para>
</listitem>
            <listitem><para><link linkend="_semaphore_8test_8cc_1a4d28b210dd621384af9d457f3399b68c">TEST</link> (SemaphoreTest, MultipleSignal)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This file contains the tests for the functionalities of the semaphore class. </para>

<para><formalpara><title>Author</title>

<para>Lucas Hern√°ndez Abreu Contact: <link xlink:href="mailto:lucas.hernandez.09@ull.edu.es">lucas.hernandez.09@ull.edu.es</link> </para>
</formalpara>
</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_semaphore_8test_8cc_1af650c646e82923c918453607b393031e"/><section>
    <title>TEST()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>semaphore.test.cc</secondary></indexterm>
<indexterm><primary>semaphore.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (SemaphoreTest , InitialCount )</computeroutput></para>
<para><para><link linkend="_test_1_test000009">Test</link> 
<para>Tests the initial count of the <link linkend="_classSemaphore">Semaphore</link> object Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 5 and tests if the count is correct. </para>
</para></para>
</section>
<anchor xml:id="_semaphore_8test_8cc_1a4d28b210dd621384af9d457f3399b68c"/><section>
    <title>TEST()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>semaphore.test.cc</secondary></indexterm>
<indexterm><primary>semaphore.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (SemaphoreTest , MultipleSignal )</computeroutput></para>
<para><para><link linkend="_test_1_test000014">Test</link> 
<para>Tests the behavior of the <link linkend="_classSemaphore">Semaphore</link> object when multiple Signal functions are called. Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 0 and calls the Signal function twice. Then it tests if the count of the semaphore is 2. </para>
</para></para>
</section>
<anchor xml:id="_semaphore_8test_8cc_1a839989411f5a2147cd64bdba9fa27905"/><section>
    <title>TEST()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>semaphore.test.cc</secondary></indexterm>
<indexterm><primary>semaphore.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (SemaphoreTest , MultipleWaitSignal )</computeroutput></para>
<para><para><link linkend="_test_1_test000011">Test</link> 
<para>Tests the Wait and Signal functions of the <link linkend="_classSemaphore">Semaphore</link> object with multiple threads. Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 0 and starts 10 threads that wait on the semaphore and signal it. The main thread signals the semaphore 10 times to wake up the waiting threads, waits for the threads to complete, waits on the semaphore and signals it once. Then it tests if the count of the semaphore is 10. </para>
</para></para>
</section>
<anchor xml:id="_semaphore_8test_8cc_1aed489802850a894442116035cc6fd450"/><section>
    <title>TEST()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>semaphore.test.cc</secondary></indexterm>
<indexterm><primary>semaphore.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (SemaphoreTest , SignalWithoutWait )</computeroutput></para>
<para><para><link linkend="_test_1_test000013">Test</link> 
<para>Tests the behavior of the <link linkend="_classSemaphore">Semaphore</link> object when a Signal is called without a corresponding Wait. Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 1 and calls the Signal function twice. Then it tests if the count of the semaphore is 2. </para>
</para></para>
</section>
<anchor xml:id="_semaphore_8test_8cc_1a45174a14d2cdeaa34e401178b0bd7f25"/><section>
    <title>TEST()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>semaphore.test.cc</secondary></indexterm>
<indexterm><primary>semaphore.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (SemaphoreTest , WaitSignal )</computeroutput></para>
<para><para><link linkend="_test_1_test000010">Test</link> 
<para>Tests the Wait and Signal functions of the <link linkend="_classSemaphore">Semaphore</link> object. Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 0 and starts a thread that waits on the semaphore and signals it. The main thread signals the semaphore to start the thread and waits for it to complete. Then it tests if the count of the semaphore is 1. </para>
</para></para>
</section>
<anchor xml:id="_semaphore_8test_8cc_1a649c78316d8d2c3dc73d84ce5d5f712b"/><section>
    <title>TEST()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>semaphore.test.cc</secondary></indexterm>
<indexterm><primary>semaphore.test.cc</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (SemaphoreTest , WaitWithoutSignal )</computeroutput></para>
<para><para><link linkend="_test_1_test000012">Test</link> 
<para>Tests the behavior of the <link linkend="_classSemaphore">Semaphore</link> object when a Wait is called without a corresponding Signal Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 0 and starts a thread that waits on the semaphore. The main thread waits for 100 milliseconds and tests if the count of the semaphore is still 0. Then it signals the semaphore and waits for the thread to complete. </para>
</para></para>
</section>
</section>
</section>
