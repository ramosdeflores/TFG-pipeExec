<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test" xml:lang="en-US">
<title>Test List</title>
<indexterm><primary>Test List</primary></indexterm>

<para><variablelist>
<varlistentry><term>Member <link linkend="_memory__manager_8test_8cc_1a869f8d44bd06d29b1285fbc3611b966f">TEST</link>  (MemoryManagerTest, Initial)</term>
<listitem>
<para><anchor xml:id="_test_1_test000001"/>Test case for initializing the <link linkend="_classMemoryManager">MemoryManager</link>. The <link linkend="_classMemoryManager">MemoryManager</link> is initialized with a given size, and the test checks if the maximum size, input queue count, and output queue count are initialized to their correct values.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_memory__manager_8test_8cc_1a25d0c0534f912bb6607daf8677285310">TEST</link>  (MemoryManagerTest, PushIntoIn)</term>
<listitem>
<para><anchor xml:id="_test_1_test000002"/>Test case for pushing an item into the input queue. The test initializes the <link linkend="_classMemoryManager">MemoryManager</link> with a size of 2 and attempts to push three different items into the input queue. The test verifies that the first two items are successfully pushed into the queue, and the result of the second push is false due to the queue&apos;s full capacity. Finally, the test checks if the input queue count is updated to the correct value.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_memory__manager_8test_8cc_1aa4d93c94a4ad6503f1eb36bdea15cbd8">TEST</link>  (MemoryManagerTest, PushIntoOut)</term>
<listitem>
<para><anchor xml:id="_test_1_test000003"/>Test case for pushing an item into the output queue. The test initializes the <link linkend="_classMemoryManager">MemoryManager</link> with a size of 2 and attempts to push two different items into the output queue. The test verifies that the first two items are successfully pushed into the queue, and the result of the second push is false due to the queue&apos;s full capacity. Finally, the test checks if the output queue count is updated to the correct value.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_memory__manager_8test_8cc_1a0c4ba9c85a884661b43550d7973bf254">TEST</link>  (MemoryManagerTest, PopFromIn)</term>
<listitem>
<para><anchor xml:id="_test_1_test000004"/>Test case for popping an item from the input queue. The test initializes the <link linkend="_classMemoryManager">MemoryManager</link> with a size of 2 and pushes two items into the input queue. The test verifies that the first item pushed is popped from the queue first, followed by the second item. Finally, the test checks if a nullptr is returned when trying to pop an item from an empty queue.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_memory__manager_8test_8cc_1a9ef81e729010668e97ba03644b2c2424">TEST</link>  (MemoryManagerTest, PopFromOut)</term>
<listitem>
<para><anchor xml:id="_test_1_test000005"/>Tests the case of popping from the output queue. It creates a <link linkend="_classMemoryManager">MemoryManager</link> object with a maximum size of 2 and pushes two integers into its out_queue_. Then, it calls PopFromOut() twice and checks if it returns the expected values.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_memory__manager_8test_8cc_1aecbee3af655cacde7a60394e8f1e88be">TEST</link>  (MemoryManagerTest, LoadMemoryManager)</term>
<listitem>
<para><anchor xml:id="_test_1_test000006"/>Test the LoadMemoryManager method of <link linkend="_classMemoryManager">MemoryManager</link> class. Given a <link linkend="_classMemoryManager">MemoryManager</link> object mm and an int pointer data1, load data1 into mm and test if in_queue_count() is 1 and out_queue_count() is 0.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_memory__manager_8test_8cc_1af5fbaada89aab5d80010625b03297b5b">TEST</link>  (MemoryManagerTest, NullPtr)</term>
<listitem>
<para><anchor xml:id="_test_1_test000007"/>Test the behaviour of <link linkend="_classMemoryManager">MemoryManager</link> class with null pointers. Given a <link linkend="_classMemoryManager">MemoryManager</link> object mm and two int pointers, load them into mm and pop them out to mm&apos;s out queue. Assert that mm&apos;s in queue and out queue are both non empty. </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_memory__manager_8test_8cc_1a5f84596eef72e6d8af087735d225893c">TEST</link>  (MemoryManagerTest, BadSizing)</term>
<listitem>
<para><anchor xml:id="_test_1_test000008"/>Test the behaviour of <link linkend="_classMemoryManager">MemoryManager</link> class with invalid sizing. Assert that creating a <link linkend="_classMemoryManager">MemoryManager</link> object with a negative size throws a MemoryManagerError.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_semaphore_8test_8cc_1af650c646e82923c918453607b393031e">TEST</link>  (SemaphoreTest, InitialCount)</term>
<listitem>
<para><anchor xml:id="_test_1_test000009"/>Tests the initial count of the <link linkend="_classSemaphore">Semaphore</link> object Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 5 and tests if the count is correct.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_semaphore_8test_8cc_1a45174a14d2cdeaa34e401178b0bd7f25">TEST</link>  (SemaphoreTest, WaitSignal)</term>
<listitem>
<para><anchor xml:id="_test_1_test000010"/>Tests the Wait and Signal functions of the <link linkend="_classSemaphore">Semaphore</link> object. Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 0 and starts a thread that waits on the semaphore and signals it. The main thread signals the semaphore to start the thread and waits for it to complete. Then it tests if the count of the semaphore is 1.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_semaphore_8test_8cc_1a839989411f5a2147cd64bdba9fa27905">TEST</link>  (SemaphoreTest, MultipleWaitSignal)</term>
<listitem>
<para><anchor xml:id="_test_1_test000011"/>Tests the Wait and Signal functions of the <link linkend="_classSemaphore">Semaphore</link> object with multiple threads. Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 0 and starts 10 threads that wait on the semaphore and signal it. The main thread signals the semaphore 10 times to wake up the waiting threads, waits for the threads to complete, waits on the semaphore and signals it once. Then it tests if the count of the semaphore is 10.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_semaphore_8test_8cc_1a649c78316d8d2c3dc73d84ce5d5f712b">TEST</link>  (SemaphoreTest, WaitWithoutSignal)</term>
<listitem>
<para><anchor xml:id="_test_1_test000012"/>Tests the behavior of the <link linkend="_classSemaphore">Semaphore</link> object when a Wait is called without a corresponding Signal Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 0 and starts a thread that waits on the semaphore. The main thread waits for 100 milliseconds and tests if the count of the semaphore is still 0. Then it signals the semaphore and waits for the thread to complete.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_semaphore_8test_8cc_1aed489802850a894442116035cc6fd450">TEST</link>  (SemaphoreTest, SignalWithoutWait)</term>
<listitem>
<para><anchor xml:id="_test_1_test000013"/>Tests the behavior of the <link linkend="_classSemaphore">Semaphore</link> object when a Signal is called without a corresponding Wait. Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 1 and calls the Signal function twice. Then it tests if the count of the semaphore is 2.  </para>
</listitem></varlistentry>
<varlistentry><term>Member <link linkend="_semaphore_8test_8cc_1a4d28b210dd621384af9d457f3399b68c">TEST</link>  (SemaphoreTest, MultipleSignal)</term>
<listitem>
<para><anchor xml:id="_test_1_test000014"/>Tests the behavior of the <link linkend="_classSemaphore">Semaphore</link> object when multiple Signal functions are called. Creates a <link linkend="_classSemaphore">Semaphore</link> object with an initial count of 0 and calls the Signal function twice. Then it tests if the count of the semaphore is 2. </para>
</listitem></varlistentry>
</variablelist>
</para>
</section>
